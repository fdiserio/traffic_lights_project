
giudice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004918  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad8  08004ad8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004ad8  08004ad8  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ad8  08004ad8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad8  08004ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000001d8  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001f4  200001f4  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fdf9  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f43  00000000  00000000  0002fe45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  00031d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c48  00000000  00000000  00032a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d3de  00000000  00000000  000336d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103b3  00000000  00000000  00050aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3780  00000000  00000000  00060e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001145e1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003678  00000000  00000000  00114634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a88 	.word	0x08004a88

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08004a88 	.word	0x08004a88

080001c8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  if (prima_attivazione){
 80001d0:	4b9f      	ldr	r3, [pc, #636]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d00c      	beq.n	80001f2 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  HAL_TIM_Base_Stop(htim);
 80001d8:	6878      	ldr	r0, [r7, #4]
 80001da:	f002 fdb2 	bl	8002d42 <HAL_TIM_Base_Stop>
	  //htim->Instance->CNT=0;
	  prima_attivazione = 0;
 80001de:	4b9c      	ldr	r3, [pc, #624]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
	  stato = S0; // settiamo lo stato iniziale dei semafori
 80001e4:	4b9b      	ldr	r3, [pc, #620]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT(&htim6); // avvio timer main
 80001ea:	489b      	ldr	r0, [pc, #620]	; (8000458 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80001ec:	f002 fdd0 	bl	8002d90 <HAL_TIM_Base_Start_IT>

	  HAL_UART_Transmit_IT(&huart4, &controllo1, 1);
	  HAL_UART_Transmit_IT(&huart5, &controllo2, 1);
  }

}
 80001f0:	e1fb      	b.n	80005ea <HAL_TIM_PeriodElapsedCallback+0x422>
  else if (htim == &htim6){
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	4a98      	ldr	r2, [pc, #608]	; (8000458 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80001f6:	4293      	cmp	r3, r2
 80001f8:	f040 8157 	bne.w	80004aa <HAL_TIM_PeriodElapsedCallback+0x2e2>
	  switch (stato){
 80001fc:	4b95      	ldr	r3, [pc, #596]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	2b05      	cmp	r3, #5
 8000202:	f200 8139 	bhi.w	8000478 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8000206:	a201      	add	r2, pc, #4	; (adr r2, 800020c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020c:	08000225 	.word	0x08000225
 8000210:	08000243 	.word	0x08000243
 8000214:	0800031d 	.word	0x0800031d
 8000218:	0800033b 	.word	0x0800033b
 800021c:	08000359 	.word	0x08000359
 8000220:	08000433 	.word	0x08000433
		  controllo1 = 'C';
 8000224:	4b8d      	ldr	r3, [pc, #564]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000226:	2243      	movs	r2, #67	; 0x43
 8000228:	701a      	strb	r2, [r3, #0]
		  controllo2 = 'C';
 800022a:	4b8d      	ldr	r3, [pc, #564]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800022c:	2243      	movs	r2, #67	; 0x43
 800022e:	701a      	strb	r2, [r3, #0]
		  htim->Instance->ARR = 14400; // setto il periodo del timer main
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 8000238:	62da      	str	r2, [r3, #44]	; 0x2c
		  stato = S1;
 800023a:	4b86      	ldr	r3, [pc, #536]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800023c:	2201      	movs	r2, #1
 800023e:	601a      	str	r2, [r3, #0]
		  break;
 8000240:	e128      	b.n	8000494 <HAL_TIM_PeriodElapsedCallback+0x2cc>
		  if (richiesta1 && richiesta2){
 8000242:	4b88      	ldr	r3, [pc, #544]	; (8000464 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d021      	beq.n	800028e <HAL_TIM_PeriodElapsedCallback+0xc6>
 800024a:	4b87      	ldr	r3, [pc, #540]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d01d      	beq.n	800028e <HAL_TIM_PeriodElapsedCallback+0xc6>
			HAL_TIM_Base_Stop_IT(htim); // arresto timer main
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f002 fe06 	bl	8002e64 <HAL_TIM_Base_Stop_IT>
			controllo1 = 'D';
 8000258:	4b80      	ldr	r3, [pc, #512]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800025a:	2244      	movs	r2, #68	; 0x44
 800025c:	701a      	strb	r2, [r3, #0]
			controllo2 = 'D';
 800025e:	4b80      	ldr	r3, [pc, #512]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000260:	2244      	movs	r2, #68	; 0x44
 8000262:	701a      	strb	r2, [r3, #0]
			pedone1 = VERDE;
 8000264:	4b81      	ldr	r3, [pc, #516]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
			pedone2 = VERDE;
 800026a:	4b81      	ldr	r3, [pc, #516]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800026c:	2200      	movs	r2, #0
 800026e:	601a      	str	r2, [r3, #0]
			richiesta1 = 0;
 8000270:	4b7c      	ldr	r3, [pc, #496]	; (8000464 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
			richiesta2 = 0;
 8000276:	4b7c      	ldr	r3, [pc, #496]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
			htim7.Instance->ARR = 14400; // setto il periodo del timer pedone
 800027c:	4b7d      	ldr	r3, [pc, #500]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 8000284:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_Base_Start_IT(&htim7); // avvio timer pedone
 8000286:	487b      	ldr	r0, [pc, #492]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000288:	f002 fd82 	bl	8002d90 <HAL_TIM_Base_Start_IT>
		  break;
 800028c:	e102      	b.n	8000494 <HAL_TIM_PeriodElapsedCallback+0x2cc>
		  else if (richiesta1){
 800028e:	4b75      	ldr	r3, [pc, #468]	; (8000464 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d017      	beq.n	80002c6 <HAL_TIM_PeriodElapsedCallback+0xfe>
			HAL_TIM_Base_Stop_IT(htim); // arresto timer main
 8000296:	6878      	ldr	r0, [r7, #4]
 8000298:	f002 fde4 	bl	8002e64 <HAL_TIM_Base_Stop_IT>
			controllo1 = 'D';
 800029c:	4b6f      	ldr	r3, [pc, #444]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800029e:	2244      	movs	r2, #68	; 0x44
 80002a0:	701a      	strb	r2, [r3, #0]
			controllo2 = 'F';
 80002a2:	4b6f      	ldr	r3, [pc, #444]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80002a4:	2246      	movs	r2, #70	; 0x46
 80002a6:	701a      	strb	r2, [r3, #0]
			pedone1 = VERDE;
 80002a8:	4b70      	ldr	r3, [pc, #448]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
			richiesta1 = 0;
 80002ae:	4b6d      	ldr	r3, [pc, #436]	; (8000464 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
			htim7.Instance->ARR = 14400; // setto il periodo del timer pedone
 80002b4:	4b6f      	ldr	r3, [pc, #444]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 80002bc:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_Base_Start_IT(&htim7); // avvio timer pedone
 80002be:	486d      	ldr	r0, [pc, #436]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80002c0:	f002 fd66 	bl	8002d90 <HAL_TIM_Base_Start_IT>
		  break;
 80002c4:	e0e6      	b.n	8000494 <HAL_TIM_PeriodElapsedCallback+0x2cc>
		  else if (richiesta2){
 80002c6:	4b68      	ldr	r3, [pc, #416]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d017      	beq.n	80002fe <HAL_TIM_PeriodElapsedCallback+0x136>
			HAL_TIM_Base_Stop_IT(htim); // arresto timer main
 80002ce:	6878      	ldr	r0, [r7, #4]
 80002d0:	f002 fdc8 	bl	8002e64 <HAL_TIM_Base_Stop_IT>
			controllo1 = 'F';
 80002d4:	4b61      	ldr	r3, [pc, #388]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80002d6:	2246      	movs	r2, #70	; 0x46
 80002d8:	701a      	strb	r2, [r3, #0]
			controllo2 = 'D';
 80002da:	4b61      	ldr	r3, [pc, #388]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80002dc:	2244      	movs	r2, #68	; 0x44
 80002de:	701a      	strb	r2, [r3, #0]
			pedone2 = VERDE;
 80002e0:	4b63      	ldr	r3, [pc, #396]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
			richiesta2 = 0;
 80002e6:	4b60      	ldr	r3, [pc, #384]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
			htim7.Instance->ARR = 14400; // setto il periodo del timer pedone
 80002ec:	4b61      	ldr	r3, [pc, #388]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 80002f4:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_Base_Start_IT(&htim7); // avvio timer pedone
 80002f6:	485f      	ldr	r0, [pc, #380]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80002f8:	f002 fd4a 	bl	8002d90 <HAL_TIM_Base_Start_IT>
		  break;
 80002fc:	e0ca      	b.n	8000494 <HAL_TIM_PeriodElapsedCallback+0x2cc>
			controllo1 = 'A';
 80002fe:	4b57      	ldr	r3, [pc, #348]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000300:	2241      	movs	r2, #65	; 0x41
 8000302:	701a      	strb	r2, [r3, #0]
			controllo2 = 'C';
 8000304:	4b56      	ldr	r3, [pc, #344]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000306:	2243      	movs	r2, #67	; 0x43
 8000308:	701a      	strb	r2, [r3, #0]
			htim->Instance->ARR = 14400; // setto il periodo del timer main
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 8000312:	62da      	str	r2, [r3, #44]	; 0x2c
			stato = S2;
 8000314:	4b4f      	ldr	r3, [pc, #316]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000316:	2202      	movs	r2, #2
 8000318:	601a      	str	r2, [r3, #0]
		  break;
 800031a:	e0bb      	b.n	8000494 <HAL_TIM_PeriodElapsedCallback+0x2cc>
			controllo1 = 'B';
 800031c:	4b4f      	ldr	r3, [pc, #316]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800031e:	2242      	movs	r2, #66	; 0x42
 8000320:	701a      	strb	r2, [r3, #0]
			controllo2 = 'C';
 8000322:	4b4f      	ldr	r3, [pc, #316]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000324:	2243      	movs	r2, #67	; 0x43
 8000326:	701a      	strb	r2, [r3, #0]
			htim->Instance->ARR = 9600; // setto il periodo del timer main
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000330:	62da      	str	r2, [r3, #44]	; 0x2c
			stato = S3;
 8000332:	4b48      	ldr	r3, [pc, #288]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000334:	2203      	movs	r2, #3
 8000336:	601a      	str	r2, [r3, #0]
			break;
 8000338:	e0ac      	b.n	8000494 <HAL_TIM_PeriodElapsedCallback+0x2cc>
		controllo1 = 'C';
 800033a:	4b48      	ldr	r3, [pc, #288]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800033c:	2243      	movs	r2, #67	; 0x43
 800033e:	701a      	strb	r2, [r3, #0]
		controllo2 = 'C';
 8000340:	4b47      	ldr	r3, [pc, #284]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000342:	2243      	movs	r2, #67	; 0x43
 8000344:	701a      	strb	r2, [r3, #0]
		htim->Instance->ARR = 14400; // setto il periodo del timer main
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 800034e:	62da      	str	r2, [r3, #44]	; 0x2c
		stato = S4;
 8000350:	4b40      	ldr	r3, [pc, #256]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8000352:	2204      	movs	r2, #4
 8000354:	601a      	str	r2, [r3, #0]
		  break;
 8000356:	e09d      	b.n	8000494 <HAL_TIM_PeriodElapsedCallback+0x2cc>
		  if (richiesta1 && richiesta2){
 8000358:	4b42      	ldr	r3, [pc, #264]	; (8000464 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d021      	beq.n	80003a4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8000360:	4b41      	ldr	r3, [pc, #260]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d01d      	beq.n	80003a4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
			HAL_TIM_Base_Stop(htim); // arresto timer main
 8000368:	6878      	ldr	r0, [r7, #4]
 800036a:	f002 fcea 	bl	8002d42 <HAL_TIM_Base_Stop>
			controllo1 = 'D';
 800036e:	4b3b      	ldr	r3, [pc, #236]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000370:	2244      	movs	r2, #68	; 0x44
 8000372:	701a      	strb	r2, [r3, #0]
			controllo2 = 'D';
 8000374:	4b3a      	ldr	r3, [pc, #232]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8000376:	2244      	movs	r2, #68	; 0x44
 8000378:	701a      	strb	r2, [r3, #0]
			pedone1 = VERDE;
 800037a:	4b3c      	ldr	r3, [pc, #240]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
			pedone2 = VERDE;
 8000380:	4b3b      	ldr	r3, [pc, #236]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
			richiesta1 = 0;
 8000386:	4b37      	ldr	r3, [pc, #220]	; (8000464 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
			richiesta2 = 0;
 800038c:	4b36      	ldr	r3, [pc, #216]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
			htim7.Instance->ARR = 14400; // setto il periodo del timer pedone
 8000392:	4b38      	ldr	r3, [pc, #224]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 800039a:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_Base_Start_IT(&htim7); // avvio timer pedone
 800039c:	4835      	ldr	r0, [pc, #212]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800039e:	f002 fcf7 	bl	8002d90 <HAL_TIM_Base_Start_IT>
		  break;
 80003a2:	e077      	b.n	8000494 <HAL_TIM_PeriodElapsedCallback+0x2cc>
		  else if (richiesta1){
 80003a4:	4b2f      	ldr	r3, [pc, #188]	; (8000464 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d017      	beq.n	80003dc <HAL_TIM_PeriodElapsedCallback+0x214>
			HAL_TIM_Base_Stop(htim); // arresto timer main
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f002 fcc8 	bl	8002d42 <HAL_TIM_Base_Stop>
			controllo1 = 'D';
 80003b2:	4b2a      	ldr	r3, [pc, #168]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80003b4:	2244      	movs	r2, #68	; 0x44
 80003b6:	701a      	strb	r2, [r3, #0]
			controllo2 = 'F';
 80003b8:	4b29      	ldr	r3, [pc, #164]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80003ba:	2246      	movs	r2, #70	; 0x46
 80003bc:	701a      	strb	r2, [r3, #0]
			pedone1 = VERDE;
 80003be:	4b2b      	ldr	r3, [pc, #172]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
			richiesta1 = 0;
 80003c4:	4b27      	ldr	r3, [pc, #156]	; (8000464 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
			htim7.Instance->ARR = 14400; // setto il periodo del timer pedone
 80003ca:	4b2a      	ldr	r3, [pc, #168]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 80003d2:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_Base_Start_IT(&htim7); // avvio timer pedone
 80003d4:	4827      	ldr	r0, [pc, #156]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80003d6:	f002 fcdb 	bl	8002d90 <HAL_TIM_Base_Start_IT>
		  break;
 80003da:	e05b      	b.n	8000494 <HAL_TIM_PeriodElapsedCallback+0x2cc>
		  else if (richiesta2){
 80003dc:	4b22      	ldr	r3, [pc, #136]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d017      	beq.n	8000414 <HAL_TIM_PeriodElapsedCallback+0x24c>
			HAL_TIM_Base_Stop(htim); // arresto timer main
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f002 fcac 	bl	8002d42 <HAL_TIM_Base_Stop>
			controllo1 = 'F';
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80003ec:	2246      	movs	r2, #70	; 0x46
 80003ee:	701a      	strb	r2, [r3, #0]
			controllo2 = 'D';
 80003f0:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80003f2:	2244      	movs	r2, #68	; 0x44
 80003f4:	701a      	strb	r2, [r3, #0]
			pedone2 = VERDE;
 80003f6:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
			richiesta2 = 0;
 80003fc:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
			htim7.Instance->ARR = 14400; // setto il periodo del timer pedone
 8000402:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 800040a:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_TIM_Base_Start_IT(&htim7); // avvio timer pedone
 800040c:	4819      	ldr	r0, [pc, #100]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800040e:	f002 fcbf 	bl	8002d90 <HAL_TIM_Base_Start_IT>
		  break;
 8000412:	e03f      	b.n	8000494 <HAL_TIM_PeriodElapsedCallback+0x2cc>
			controllo1 = 'C';
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000416:	2243      	movs	r2, #67	; 0x43
 8000418:	701a      	strb	r2, [r3, #0]
			controllo2 = 'A';
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800041c:	2241      	movs	r2, #65	; 0x41
 800041e:	701a      	strb	r2, [r3, #0]
			htim->Instance->ARR = 14400; // setto il periodo del timer main
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 8000428:	62da      	str	r2, [r3, #44]	; 0x2c
			stato = S5;
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800042c:	2205      	movs	r2, #5
 800042e:	601a      	str	r2, [r3, #0]
		  break;
 8000430:	e030      	b.n	8000494 <HAL_TIM_PeriodElapsedCallback+0x2cc>
		controllo1 = 'C';
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8000434:	2243      	movs	r2, #67	; 0x43
 8000436:	701a      	strb	r2, [r3, #0]
		controllo2 = 'B';
 8000438:	4b09      	ldr	r3, [pc, #36]	; (8000460 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800043a:	2242      	movs	r2, #66	; 0x42
 800043c:	701a      	strb	r2, [r3, #0]
		htim->Instance->ARR = 9600; // setto il periodo del timer main
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000446:	62da      	str	r2, [r3, #44]	; 0x2c
		stato = S0;
 8000448:	4b02      	ldr	r3, [pc, #8]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
		break;
 800044e:	e021      	b.n	8000494 <HAL_TIM_PeriodElapsedCallback+0x2cc>
 8000450:	2000000c 	.word	0x2000000c
 8000454:	200001e0 	.word	0x200001e0
 8000458:	20000038 	.word	0x20000038
 800045c:	20000008 	.word	0x20000008
 8000460:	20000009 	.word	0x20000009
 8000464:	200001e8 	.word	0x200001e8
 8000468:	200001ec 	.word	0x200001ec
 800046c:	20000000 	.word	0x20000000
 8000470:	20000004 	.word	0x20000004
 8000474:	20000084 	.word	0x20000084
		controllo1 = 'B';
 8000478:	4b5e      	ldr	r3, [pc, #376]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 800047a:	2242      	movs	r2, #66	; 0x42
 800047c:	701a      	strb	r2, [r3, #0]
		controllo2 = 'B';
 800047e:	4b5e      	ldr	r3, [pc, #376]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8000480:	2242      	movs	r2, #66	; 0x42
 8000482:	701a      	strb	r2, [r3, #0]
		htim->Instance->ARR = 4800; // setto il periodo del timer main
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 800048c:	62da      	str	r2, [r3, #44]	; 0x2c
		stato = S0;
 800048e:	4b5b      	ldr	r3, [pc, #364]	; (80005fc <HAL_TIM_PeriodElapsedCallback+0x434>)
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit_IT(&huart4, &controllo1, 1);
 8000494:	2201      	movs	r2, #1
 8000496:	4957      	ldr	r1, [pc, #348]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8000498:	4859      	ldr	r0, [pc, #356]	; (8000600 <HAL_TIM_PeriodElapsedCallback+0x438>)
 800049a:	f002 ffd5 	bl	8003448 <HAL_UART_Transmit_IT>
	  HAL_UART_Transmit_IT(&huart5, &controllo2, 1);
 800049e:	2201      	movs	r2, #1
 80004a0:	4955      	ldr	r1, [pc, #340]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80004a2:	4858      	ldr	r0, [pc, #352]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 80004a4:	f002 ffd0 	bl	8003448 <HAL_UART_Transmit_IT>
}
 80004a8:	e09f      	b.n	80005ea <HAL_TIM_PeriodElapsedCallback+0x422>
  else if (htim == &htim7){
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a56      	ldr	r2, [pc, #344]	; (8000608 <HAL_TIM_PeriodElapsedCallback+0x440>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	f040 809b 	bne.w	80005ea <HAL_TIM_PeriodElapsedCallback+0x422>
	  if ((pedone1 == VERDE) && (pedone2 == VERDE)){
 80004b4:	4b55      	ldr	r3, [pc, #340]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x444>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d115      	bne.n	80004e8 <HAL_TIM_PeriodElapsedCallback+0x320>
 80004bc:	4b54      	ldr	r3, [pc, #336]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x448>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d111      	bne.n	80004e8 <HAL_TIM_PeriodElapsedCallback+0x320>
		  pedone1 = GIALLO;
 80004c4:	4b51      	ldr	r3, [pc, #324]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x444>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
		  pedone2 = GIALLO;
 80004ca:	4b51      	ldr	r3, [pc, #324]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x448>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	601a      	str	r2, [r3, #0]
		  htim->Instance->ARR = 9600; // setto il periodo del timer pedone
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004d8:	62da      	str	r2, [r3, #44]	; 0x2c
		  controllo1 = 'E';
 80004da:	4b46      	ldr	r3, [pc, #280]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80004dc:	2245      	movs	r2, #69	; 0x45
 80004de:	701a      	strb	r2, [r3, #0]
		  controllo2 = 'E';
 80004e0:	4b45      	ldr	r3, [pc, #276]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80004e2:	2245      	movs	r2, #69	; 0x45
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	e076      	b.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0x40e>
	  else if ((pedone1 == GIALLO) && (pedone2 == GIALLO)){
 80004e8:	4b48      	ldr	r3, [pc, #288]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x444>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d11b      	bne.n	8000528 <HAL_TIM_PeriodElapsedCallback+0x360>
 80004f0:	4b47      	ldr	r3, [pc, #284]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x448>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d117      	bne.n	8000528 <HAL_TIM_PeriodElapsedCallback+0x360>
		  HAL_TIM_Base_Stop_IT(htim); // arresto timer pedone
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f002 fcb3 	bl	8002e64 <HAL_TIM_Base_Stop_IT>
		  pedone1 = ROSSO;
 80004fe:	4b43      	ldr	r3, [pc, #268]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x444>)
 8000500:	2202      	movs	r2, #2
 8000502:	601a      	str	r2, [r3, #0]
		  pedone2 = ROSSO;
 8000504:	4b42      	ldr	r3, [pc, #264]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8000506:	2202      	movs	r2, #2
 8000508:	601a      	str	r2, [r3, #0]
		  controllo1 = 'C';
 800050a:	4b3a      	ldr	r3, [pc, #232]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 800050c:	2243      	movs	r2, #67	; 0x43
 800050e:	701a      	strb	r2, [r3, #0]
		  controllo2 = 'C';
 8000510:	4b39      	ldr	r3, [pc, #228]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8000512:	2243      	movs	r2, #67	; 0x43
 8000514:	701a      	strb	r2, [r3, #0]
		  htim6.Instance->ARR = 14400; // setto il periodo del timer main
 8000516:	4b3f      	ldr	r3, [pc, #252]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 800051e:	62da      	str	r2, [r3, #44]	; 0x2c
		  HAL_TIM_Base_Start_IT(&htim6); // avvio timer main
 8000520:	483c      	ldr	r0, [pc, #240]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8000522:	f002 fc35 	bl	8002d90 <HAL_TIM_Base_Start_IT>
 8000526:	e056      	b.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0x40e>
	  else if (pedone1 == VERDE){
 8000528:	4b38      	ldr	r3, [pc, #224]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x444>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10e      	bne.n	800054e <HAL_TIM_PeriodElapsedCallback+0x386>
		  pedone1 = GIALLO;
 8000530:	4b36      	ldr	r3, [pc, #216]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x444>)
 8000532:	2201      	movs	r2, #1
 8000534:	601a      	str	r2, [r3, #0]
		  htim->Instance->ARR = 9600; // setto il periodo del timer pedone
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800053e:	62da      	str	r2, [r3, #44]	; 0x2c
		  controllo1 = 'E';
 8000540:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8000542:	2245      	movs	r2, #69	; 0x45
 8000544:	701a      	strb	r2, [r3, #0]
		  controllo2 = 'G';
 8000546:	4b2c      	ldr	r3, [pc, #176]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8000548:	2247      	movs	r2, #71	; 0x47
 800054a:	701a      	strb	r2, [r3, #0]
 800054c:	e043      	b.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0x40e>
	  else if (pedone1 == GIALLO){
 800054e:	4b2f      	ldr	r3, [pc, #188]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x444>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d114      	bne.n	8000580 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		  HAL_TIM_Base_Stop_IT(htim); // arresto timer pedone
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f002 fc84 	bl	8002e64 <HAL_TIM_Base_Stop_IT>
		  pedone1 = ROSSO;
 800055c:	4b2b      	ldr	r3, [pc, #172]	; (800060c <HAL_TIM_PeriodElapsedCallback+0x444>)
 800055e:	2202      	movs	r2, #2
 8000560:	601a      	str	r2, [r3, #0]
		  controllo1 = 'C';
 8000562:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8000564:	2243      	movs	r2, #67	; 0x43
 8000566:	701a      	strb	r2, [r3, #0]
		  controllo2 = 'C';
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 800056a:	2243      	movs	r2, #67	; 0x43
 800056c:	701a      	strb	r2, [r3, #0]
		  htim6.Instance->ARR = 14400; // setto il periodo del timer main
 800056e:	4b29      	ldr	r3, [pc, #164]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 8000576:	62da      	str	r2, [r3, #44]	; 0x2c
		  HAL_TIM_Base_Start_IT(&htim6); // avvio timer main
 8000578:	4826      	ldr	r0, [pc, #152]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 800057a:	f002 fc09 	bl	8002d90 <HAL_TIM_Base_Start_IT>
 800057e:	e02a      	b.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0x40e>
	  else if (pedone2 == VERDE){
 8000580:	4b23      	ldr	r3, [pc, #140]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d10e      	bne.n	80005a6 <HAL_TIM_PeriodElapsedCallback+0x3de>
		  pedone2 = GIALLO;
 8000588:	4b21      	ldr	r3, [pc, #132]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x448>)
 800058a:	2201      	movs	r2, #1
 800058c:	601a      	str	r2, [r3, #0]
		  htim->Instance->ARR = 9600; // setto il periodo del timer pedone
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000596:	62da      	str	r2, [r3, #44]	; 0x2c
		  controllo1 = 'G';
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 800059a:	2247      	movs	r2, #71	; 0x47
 800059c:	701a      	strb	r2, [r3, #0]
		  controllo2 = 'E';
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80005a0:	2245      	movs	r2, #69	; 0x45
 80005a2:	701a      	strb	r2, [r3, #0]
 80005a4:	e017      	b.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0x40e>
	  else if (pedone2 == GIALLO){
 80005a6:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x448>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d113      	bne.n	80005d6 <HAL_TIM_PeriodElapsedCallback+0x40e>
		  HAL_TIM_Base_Stop_IT(htim); // arresto timer pedone
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f002 fc58 	bl	8002e64 <HAL_TIM_Base_Stop_IT>
		  pedone2 = ROSSO;
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <HAL_TIM_PeriodElapsedCallback+0x448>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	601a      	str	r2, [r3, #0]
		  controllo1 = 'C';
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80005bc:	2243      	movs	r2, #67	; 0x43
 80005be:	701a      	strb	r2, [r3, #0]
		  controllo2 = 'C';
 80005c0:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80005c2:	2243      	movs	r2, #67	; 0x43
 80005c4:	701a      	strb	r2, [r3, #0]
		  htim6.Instance->ARR = 14400; // setto il periodo del timer main
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 80005ce:	62da      	str	r2, [r3, #44]	; 0x2c
		  HAL_TIM_Base_Start_IT(&htim6); // avvio timer main
 80005d0:	4810      	ldr	r0, [pc, #64]	; (8000614 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 80005d2:	f002 fbdd 	bl	8002d90 <HAL_TIM_Base_Start_IT>
	  HAL_UART_Transmit_IT(&huart4, &controllo1, 1);
 80005d6:	2201      	movs	r2, #1
 80005d8:	4906      	ldr	r1, [pc, #24]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <HAL_TIM_PeriodElapsedCallback+0x438>)
 80005dc:	f002 ff34 	bl	8003448 <HAL_UART_Transmit_IT>
	  HAL_UART_Transmit_IT(&huart5, &controllo2, 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	4905      	ldr	r1, [pc, #20]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 80005e6:	f002 ff2f 	bl	8003448 <HAL_UART_Transmit_IT>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000008 	.word	0x20000008
 80005f8:	20000009 	.word	0x20000009
 80005fc:	200001e0 	.word	0x200001e0
 8000600:	200000d0 	.word	0x200000d0
 8000604:	20000158 	.word	0x20000158
 8000608:	20000084 	.word	0x20000084
 800060c:	20000000 	.word	0x20000000
 8000610:	20000004 	.word	0x20000004
 8000614:	20000038 	.word	0x20000038

08000618 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  if (huart == &huart4){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <HAL_UART_RxCpltCallback+0x54>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <HAL_UART_RxCpltCallback+0x2a>
	  // La richiesta arriva dal semaforo 1
	  if (pedone1 == ROSSO){
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <HAL_UART_RxCpltCallback+0x58>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b02      	cmp	r3, #2
 800062e:	d102      	bne.n	8000636 <HAL_UART_RxCpltCallback+0x1e>
		  richiesta1 = 1;
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <HAL_UART_RxCpltCallback+0x5c>)
 8000632:	2201      	movs	r2, #1
 8000634:	601a      	str	r2, [r3, #0]
	  }

	  HAL_UART_Receive_IT(huart, &prenotazione1, 1);
 8000636:	2201      	movs	r2, #1
 8000638:	490f      	ldr	r1, [pc, #60]	; (8000678 <HAL_UART_RxCpltCallback+0x60>)
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f002 ff62 	bl	8003504 <HAL_UART_Receive_IT>
		  richiesta2 = 1;
	  }

	  HAL_UART_Receive_IT(huart, &prenotazione2, 1);
  }
}
 8000640:	e00f      	b.n	8000662 <HAL_UART_RxCpltCallback+0x4a>
  else if (huart == &huart5){
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <HAL_UART_RxCpltCallback+0x64>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d10b      	bne.n	8000662 <HAL_UART_RxCpltCallback+0x4a>
	  if (pedone2 == ROSSO){
 800064a:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <HAL_UART_RxCpltCallback+0x68>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b02      	cmp	r3, #2
 8000650:	d102      	bne.n	8000658 <HAL_UART_RxCpltCallback+0x40>
		  richiesta2 = 1;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_UART_RxCpltCallback+0x6c>)
 8000654:	2201      	movs	r2, #1
 8000656:	601a      	str	r2, [r3, #0]
	  HAL_UART_Receive_IT(huart, &prenotazione2, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	490b      	ldr	r1, [pc, #44]	; (8000688 <HAL_UART_RxCpltCallback+0x70>)
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f002 ff51 	bl	8003504 <HAL_UART_Receive_IT>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200000d0 	.word	0x200000d0
 8000670:	20000000 	.word	0x20000000
 8000674:	200001e8 	.word	0x200001e8
 8000678:	200001e4 	.word	0x200001e4
 800067c:	20000158 	.word	0x20000158
 8000680:	20000004 	.word	0x20000004
 8000684:	200001ec 	.word	0x200001ec
 8000688:	200001e5 	.word	0x200001e5

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fb74 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f822 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f950 	bl	800093c <MX_GPIO_Init>
  MX_TIM6_Init();
 800069c:	f000 f87a 	bl	8000794 <MX_TIM6_Init>
  MX_TIM7_Init();
 80006a0:	f000 f8b0 	bl	8000804 <MX_TIM7_Init>
  MX_UART4_Init();
 80006a4:	f000 f8e6 	bl	8000874 <MX_UART4_Init>
  MX_UART5_Init();
 80006a8:	f000 f916 	bl	80008d8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7); // avvio timer pedone
 80006ac:	4806      	ldr	r0, [pc, #24]	; (80006c8 <main+0x3c>)
 80006ae:	f002 fb6f 	bl	8002d90 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart4, &prenotazione1, 1); //mettiamo il giudice in attesa di un messaggio dal semaforo 1
 80006b2:	2201      	movs	r2, #1
 80006b4:	4905      	ldr	r1, [pc, #20]	; (80006cc <main+0x40>)
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <main+0x44>)
 80006b8:	f002 ff24 	bl	8003504 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, &prenotazione2, 1); //mettiamo il giudice in attesa di un messaggio dal semaforo 2
 80006bc:	2201      	movs	r2, #1
 80006be:	4905      	ldr	r1, [pc, #20]	; (80006d4 <main+0x48>)
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <main+0x4c>)
 80006c2:	f002 ff1f 	bl	8003504 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <main+0x3a>
 80006c8:	20000084 	.word	0x20000084
 80006cc:	200001e4 	.word	0x200001e4
 80006d0:	200000d0 	.word	0x200000d0
 80006d4:	200001e5 	.word	0x200001e5
 80006d8:	20000158 	.word	0x20000158

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b09e      	sub	sp, #120	; 0x78
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006e6:	2228      	movs	r2, #40	; 0x28
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 f9c4 	bl	8004a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000700:	463b      	mov	r3, r7
 8000702:	223c      	movs	r2, #60	; 0x3c
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f004 f9b6 	bl	8004a78 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070c:	2301      	movs	r3, #1
 800070e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000710:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000714:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071a:	2301      	movs	r3, #1
 800071c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000726:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000728:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800072c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fe8a 	bl	800144c <HAL_RCC_OscConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800073e:	f000 f97f 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000742:	230f      	movs	r3, #15
 8000744:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000746:	2302      	movs	r3, #2
 8000748:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000758:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800075c:	2101      	movs	r1, #1
 800075e:	4618      	mov	r0, r3
 8000760:	f001 feb2 	bl	80024c8 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800076a:	f000 f969 	bl	8000a40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5;
 800076e:	2318      	movs	r3, #24
 8000770:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4618      	mov	r0, r3
 800077e:	f002 f8d9 	bl	8002934 <HAL_RCCEx_PeriphCLKConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000788:	f000 f95a 	bl	8000a40 <Error_Handler>
  }
}
 800078c:	bf00      	nop
 800078e:	3778      	adds	r7, #120	; 0x78
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MX_TIM6_Init+0x68>)
 80007a6:	4a16      	ldr	r2, [pc, #88]	; (8000800 <MX_TIM6_Init+0x6c>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_TIM6_Init+0x68>)
 80007ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80007b0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_TIM6_Init+0x68>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 14400;
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_TIM6_Init+0x68>)
 80007ba:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 80007be:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_TIM6_Init+0x68>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_TIM6_Init+0x68>)
 80007c8:	f002 fa64 	bl	8002c94 <HAL_TIM_Base_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80007d2:	f000 f935 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007d6:	2320      	movs	r3, #32
 80007d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_TIM6_Init+0x68>)
 80007e4:	f002 fd44 	bl	8003270 <HAL_TIMEx_MasterConfigSynchronization>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80007ee:	f000 f927 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000038 	.word	0x20000038
 8000800:	40001000 	.word	0x40001000

08000804 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_TIM7_Init+0x68>)
 8000816:	4a16      	ldr	r2, [pc, #88]	; (8000870 <MX_TIM7_Init+0x6c>)
 8000818:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_TIM7_Init+0x68>)
 800081c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000820:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_TIM7_Init+0x68>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 14400;
 8000828:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_TIM7_Init+0x68>)
 800082a:	f44f 5261 	mov.w	r2, #14400	; 0x3840
 800082e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000830:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_TIM7_Init+0x68>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000836:	480d      	ldr	r0, [pc, #52]	; (800086c <MX_TIM7_Init+0x68>)
 8000838:	f002 fa2c 	bl	8002c94 <HAL_TIM_Base_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000842:	f000 f8fd 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000846:	2320      	movs	r3, #32
 8000848:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <MX_TIM7_Init+0x68>)
 8000854:	f002 fd0c 	bl	8003270 <HAL_TIMEx_MasterConfigSynchronization>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800085e:	f000 f8ef 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000084 	.word	0x20000084
 8000870:	40001400 	.word	0x40001400

08000874 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <MX_UART4_Init+0x5c>)
 800087a:	4a16      	ldr	r2, [pc, #88]	; (80008d4 <MX_UART4_Init+0x60>)
 800087c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800087e:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_UART4_Init+0x5c>)
 8000880:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000884:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_UART4_Init+0x5c>)
 8000888:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800088c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_UART4_Init+0x5c>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_UART4_Init+0x5c>)
 8000896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800089a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_UART4_Init+0x5c>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_UART4_Init+0x5c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_UART4_Init+0x5c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_UART4_Init+0x5c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_UART4_Init+0x5c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_UART4_Init+0x5c>)
 80008bc:	f002 fd76 	bl	80033ac <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_UART4_Init+0x56>
  {
    Error_Handler();
 80008c6:	f000 f8bb 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000d0 	.word	0x200000d0
 80008d4:	40004c00 	.word	0x40004c00

080008d8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_UART5_Init+0x5c>)
 80008de:	4a16      	ldr	r2, [pc, #88]	; (8000938 <MX_UART5_Init+0x60>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_UART5_Init+0x5c>)
 80008e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008e8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_UART5_Init+0x5c>)
 80008ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008f0:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_UART5_Init+0x5c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_UART5_Init+0x5c>)
 80008fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008fe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_UART5_Init+0x5c>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_UART5_Init+0x5c>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_UART5_Init+0x5c>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_UART5_Init+0x5c>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_UART5_Init+0x5c>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_UART5_Init+0x5c>)
 8000920:	f002 fd44 	bl	80033ac <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_UART5_Init+0x56>
  {
    Error_Handler();
 800092a:	f000 f889 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000158 	.word	0x20000158
 8000938:	40005000 	.word	0x40005000

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	4b39      	ldr	r3, [pc, #228]	; (8000a38 <MX_GPIO_Init+0xfc>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a38      	ldr	r2, [pc, #224]	; (8000a38 <MX_GPIO_Init+0xfc>)
 8000958:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800095c:	6153      	str	r3, [r2, #20]
 800095e:	4b36      	ldr	r3, [pc, #216]	; (8000a38 <MX_GPIO_Init+0xfc>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800096a:	4b33      	ldr	r3, [pc, #204]	; (8000a38 <MX_GPIO_Init+0xfc>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a32      	ldr	r2, [pc, #200]	; (8000a38 <MX_GPIO_Init+0xfc>)
 8000970:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000974:	6153      	str	r3, [r2, #20]
 8000976:	4b30      	ldr	r3, [pc, #192]	; (8000a38 <MX_GPIO_Init+0xfc>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <MX_GPIO_Init+0xfc>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	4a2c      	ldr	r2, [pc, #176]	; (8000a38 <MX_GPIO_Init+0xfc>)
 8000988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098c:	6153      	str	r3, [r2, #20]
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <MX_GPIO_Init+0xfc>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <MX_GPIO_Init+0xfc>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4a26      	ldr	r2, [pc, #152]	; (8000a38 <MX_GPIO_Init+0xfc>)
 80009a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009a4:	6153      	str	r3, [r2, #20]
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <MX_GPIO_Init+0xfc>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_GPIO_Init+0xfc>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <MX_GPIO_Init+0xfc>)
 80009b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009bc:	6153      	str	r3, [r2, #20]
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_GPIO_Init+0xfc>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80009ca:	23e0      	movs	r3, #224	; 0xe0
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d6:	2303      	movs	r3, #3
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009da:	2305      	movs	r3, #5
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	f107 0314 	add.w	r3, r7, #20
 80009e2:	4619      	mov	r1, r3
 80009e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e8:	f000 fbb6 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80009ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80009fe:	230e      	movs	r3, #14
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f000 fba4 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000a10:	23c0      	movs	r3, #192	; 0xc0
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a14:	2312      	movs	r3, #18
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a20:	2304      	movs	r3, #4
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_GPIO_Init+0x100>)
 8000a2c:	f000 fb94 	bl	8001158 <HAL_GPIO_Init>

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	48000400 	.word	0x48000400

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <Error_Handler+0x8>
	...

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_MspInit+0x44>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_MspInit+0x44>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6193      	str	r3, [r2, #24]
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_MspInit+0x44>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x44>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x44>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	61d3      	str	r3, [r2, #28]
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x44>)
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a82:	2007      	movs	r0, #7
 8000a84:	f000 fab0 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a1a      	ldr	r2, [pc, #104]	; (8000b0c <HAL_TIM_Base_MspInit+0x78>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d114      	bne.n	8000ad0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <HAL_TIM_Base_MspInit+0x7c>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	4a19      	ldr	r2, [pc, #100]	; (8000b10 <HAL_TIM_Base_MspInit+0x7c>)
 8000aac:	f043 0310 	orr.w	r3, r3, #16
 8000ab0:	61d3      	str	r3, [r2, #28]
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <HAL_TIM_Base_MspInit+0x7c>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	f003 0310 	and.w	r3, r3, #16
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2036      	movs	r0, #54	; 0x36
 8000ac4:	f000 fa9b 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ac8:	2036      	movs	r0, #54	; 0x36
 8000aca:	f000 fab4 	bl	8001036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000ace:	e018      	b.n	8000b02 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <HAL_TIM_Base_MspInit+0x80>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d113      	bne.n	8000b02 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_TIM_Base_MspInit+0x7c>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <HAL_TIM_Base_MspInit+0x7c>)
 8000ae0:	f043 0320 	orr.w	r3, r3, #32
 8000ae4:	61d3      	str	r3, [r2, #28]
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_TIM_Base_MspInit+0x7c>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 0320 	and.w	r3, r3, #32
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 1);
 8000af2:	2201      	movs	r2, #1
 8000af4:	2100      	movs	r1, #0
 8000af6:	2037      	movs	r0, #55	; 0x37
 8000af8:	f000 fa81 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000afc:	2037      	movs	r0, #55	; 0x37
 8000afe:	f000 fa9a 	bl	8001036 <HAL_NVIC_EnableIRQ>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40001000 	.word	0x40001000
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40001400 	.word	0x40001400

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a45      	ldr	r2, [pc, #276]	; (8000c4c <HAL_UART_MspInit+0x134>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d131      	bne.n	8000b9e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b3a:	4b45      	ldr	r3, [pc, #276]	; (8000c50 <HAL_UART_MspInit+0x138>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	4a44      	ldr	r2, [pc, #272]	; (8000c50 <HAL_UART_MspInit+0x138>)
 8000b40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b44:	61d3      	str	r3, [r2, #28]
 8000b46:	4b42      	ldr	r3, [pc, #264]	; (8000c50 <HAL_UART_MspInit+0x138>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b4e:	61bb      	str	r3, [r7, #24]
 8000b50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4b3f      	ldr	r3, [pc, #252]	; (8000c50 <HAL_UART_MspInit+0x138>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a3e      	ldr	r2, [pc, #248]	; (8000c50 <HAL_UART_MspInit+0x138>)
 8000b58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b3c      	ldr	r3, [pc, #240]	; (8000c50 <HAL_UART_MspInit+0x138>)
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	4833      	ldr	r0, [pc, #204]	; (8000c54 <HAL_UART_MspInit+0x13c>)
 8000b88:	f000 fae6 	bl	8001158 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 1);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2034      	movs	r0, #52	; 0x34
 8000b92:	f000 fa34 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000b96:	2034      	movs	r0, #52	; 0x34
 8000b98:	f000 fa4d 	bl	8001036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000b9c:	e051      	b.n	8000c42 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==UART5)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a2d      	ldr	r2, [pc, #180]	; (8000c58 <HAL_UART_MspInit+0x140>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d14c      	bne.n	8000c42 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ba8:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <HAL_UART_MspInit+0x138>)
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	4a28      	ldr	r2, [pc, #160]	; (8000c50 <HAL_UART_MspInit+0x138>)
 8000bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bb2:	61d3      	str	r3, [r2, #28]
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <HAL_UART_MspInit+0x138>)
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <HAL_UART_MspInit+0x138>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <HAL_UART_MspInit+0x138>)
 8000bc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bca:	6153      	str	r3, [r2, #20]
 8000bcc:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <HAL_UART_MspInit+0x138>)
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <HAL_UART_MspInit+0x138>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <HAL_UART_MspInit+0x138>)
 8000bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000be2:	6153      	str	r3, [r2, #20]
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <HAL_UART_MspInit+0x138>)
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000c02:	2305      	movs	r3, #5
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4811      	ldr	r0, [pc, #68]	; (8000c54 <HAL_UART_MspInit+0x13c>)
 8000c0e:	f000 faa3 	bl	8001158 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c12:	2304      	movs	r3, #4
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000c22:	2305      	movs	r3, #5
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <HAL_UART_MspInit+0x144>)
 8000c2e:	f000 fa93 	bl	8001158 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 1);
 8000c32:	2201      	movs	r2, #1
 8000c34:	2100      	movs	r1, #0
 8000c36:	2035      	movs	r0, #53	; 0x35
 8000c38:	f000 f9e1 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000c3c:	2035      	movs	r0, #53	; 0x35
 8000c3e:	f000 f9fa 	bl	8001036 <HAL_NVIC_EnableIRQ>
}
 8000c42:	bf00      	nop
 8000c44:	3730      	adds	r7, #48	; 0x30
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40004c00 	.word	0x40004c00
 8000c50:	40021000 	.word	0x40021000
 8000c54:	48000800 	.word	0x48000800
 8000c58:	40005000 	.word	0x40005000
 8000c5c:	48000c00 	.word	0x48000c00

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cac:	f000 f8ac 	bl	8000e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <UART4_IRQHandler+0x10>)
 8000cba:	f002 fc67 	bl	800358c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200000d0 	.word	0x200000d0

08000cc8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <UART5_IRQHandler+0x10>)
 8000cce:	f002 fc5d 	bl	800358c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000158 	.word	0x20000158

08000cdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <TIM6_DAC_IRQHandler+0x10>)
 8000ce2:	f002 f8ee 	bl	8002ec2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000038 	.word	0x20000038

08000cf0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <TIM7_IRQHandler+0x10>)
 8000cf6:	f002 f8e4 	bl	8002ec2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000084 	.word	0x20000084

08000d04 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d60 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d2c:	f7ff ffea 	bl	8000d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d32:	490d      	ldr	r1, [pc, #52]	; (8000d68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <LoopForever+0xe>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d48:	4c0a      	ldr	r4, [pc, #40]	; (8000d74 <LoopForever+0x16>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d56:	f003 fe6b 	bl	8004a30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d5a:	f7ff fc97 	bl	800068c <main>

08000d5e <LoopForever>:

LoopForever:
    b LoopForever
 8000d5e:	e7fe      	b.n	8000d5e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d60:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d6c:	08004ae0 	.word	0x08004ae0
  ldr r2, =_sbss
 8000d70:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d74:	200001f4 	.word	0x200001f4

08000d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC1_2_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_Init+0x28>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_Init+0x28>)
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f92b 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 f808 	bl	8000da8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f7ff fe58 	bl	8000a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_InitTick+0x54>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x58>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f943 	bl	8001052 <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00e      	b.n	8000df4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d80a      	bhi.n	8000df2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f000 f90b 	bl	8000ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <HAL_InitTick+0x5c>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e000      	b.n	8000df4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000010 	.word	0x20000010
 8000e00:	20000018 	.word	0x20000018
 8000e04:	20000014 	.word	0x20000014

08000e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000018 	.word	0x20000018
 8000e2c:	200001f0 	.word	0x200001f0

08000e30 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	200001f0 	.word	0x200001f0

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db0b      	blt.n	8000ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 021f 	and.w	r2, r3, #31
 8000ec4:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <__NVIC_EnableIRQ+0x38>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	2001      	movs	r0, #1
 8000ece:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f7ff ff8e 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff29 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff3e 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff8e 	bl	8000f3c <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff31 	bl	8000eac <__NVIC_EnableIRQ>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffa2 	bl	8000fa4 <SysTick_Config>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001078:	2b02      	cmp	r3, #2
 800107a:	d008      	beq.n	800108e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2204      	movs	r2, #4
 8001080:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e020      	b.n	80010d0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 020e 	bic.w	r2, r2, #14
 800109c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0201 	bic.w	r2, r2, #1
 80010ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b6:	2101      	movs	r1, #1
 80010b8:	fa01 f202 	lsl.w	r2, r1, r2
 80010bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d005      	beq.n	80010fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2204      	movs	r2, #4
 80010f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e027      	b.n	800114e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 020e 	bic.w	r2, r2, #14
 800110c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0201 	bic.w	r2, r2, #1
 800111c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001126:	2101      	movs	r1, #1
 8001128:	fa01 f202 	lsl.w	r2, r1, r2
 800112c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	4798      	blx	r3
    } 
  }
  return status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001166:	e154      	b.n	8001412 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	4013      	ands	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8146 	beq.w	800140c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b01      	cmp	r3, #1
 800118a:	d005      	beq.n	8001198 <HAL_GPIO_Init+0x40>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d130      	bne.n	80011fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ce:	2201      	movs	r2, #1
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	f003 0201 	and.w	r2, r3, #1
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	2b03      	cmp	r3, #3
 8001204:	d017      	beq.n	8001236 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	2203      	movs	r2, #3
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d123      	bne.n	800128a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	691a      	ldr	r2, [r3, #16]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	6939      	ldr	r1, [r7, #16]
 8001286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0203 	and.w	r2, r3, #3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 80a0 	beq.w	800140c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012cc:	4b58      	ldr	r3, [pc, #352]	; (8001430 <HAL_GPIO_Init+0x2d8>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a57      	ldr	r2, [pc, #348]	; (8001430 <HAL_GPIO_Init+0x2d8>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b55      	ldr	r3, [pc, #340]	; (8001430 <HAL_GPIO_Init+0x2d8>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012e4:	4a53      	ldr	r2, [pc, #332]	; (8001434 <HAL_GPIO_Init+0x2dc>)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800130e:	d019      	beq.n	8001344 <HAL_GPIO_Init+0x1ec>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a49      	ldr	r2, [pc, #292]	; (8001438 <HAL_GPIO_Init+0x2e0>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d013      	beq.n	8001340 <HAL_GPIO_Init+0x1e8>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a48      	ldr	r2, [pc, #288]	; (800143c <HAL_GPIO_Init+0x2e4>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d00d      	beq.n	800133c <HAL_GPIO_Init+0x1e4>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a47      	ldr	r2, [pc, #284]	; (8001440 <HAL_GPIO_Init+0x2e8>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d007      	beq.n	8001338 <HAL_GPIO_Init+0x1e0>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a46      	ldr	r2, [pc, #280]	; (8001444 <HAL_GPIO_Init+0x2ec>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d101      	bne.n	8001334 <HAL_GPIO_Init+0x1dc>
 8001330:	2304      	movs	r3, #4
 8001332:	e008      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001334:	2305      	movs	r3, #5
 8001336:	e006      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001338:	2303      	movs	r3, #3
 800133a:	e004      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 800133c:	2302      	movs	r3, #2
 800133e:	e002      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001344:	2300      	movs	r3, #0
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	f002 0203 	and.w	r2, r2, #3
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	4093      	lsls	r3, r2
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001356:	4937      	ldr	r1, [pc, #220]	; (8001434 <HAL_GPIO_Init+0x2dc>)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001364:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001388:	4a2f      	ldr	r2, [pc, #188]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800138e:	4b2e      	ldr	r3, [pc, #184]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013b2:	4a25      	ldr	r2, [pc, #148]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b8:	4b23      	ldr	r3, [pc, #140]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013dc:	4a1a      	ldr	r2, [pc, #104]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001406:	4a10      	ldr	r2, [pc, #64]	; (8001448 <HAL_GPIO_Init+0x2f0>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	fa22 f303 	lsr.w	r3, r2, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	f47f aea3 	bne.w	8001168 <HAL_GPIO_Init+0x10>
  }
}
 8001422:	bf00      	nop
 8001424:	bf00      	nop
 8001426:	371c      	adds	r7, #28
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000
 8001438:	48000400 	.word	0x48000400
 800143c:	48000800 	.word	0x48000800
 8001440:	48000c00 	.word	0x48000c00
 8001444:	48001000 	.word	0x48001000
 8001448:	40010400 	.word	0x40010400

0800144c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001452:	af00      	add	r7, sp, #0
 8001454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001458:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800145c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800145e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001462:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d102      	bne.n	8001472 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	f001 b823 	b.w	80024b8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001476:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 817d 	beq.w	8001782 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001488:	4bbc      	ldr	r3, [pc, #752]	; (800177c <HAL_RCC_OscConfig+0x330>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b04      	cmp	r3, #4
 8001492:	d00c      	beq.n	80014ae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001494:	4bb9      	ldr	r3, [pc, #740]	; (800177c <HAL_RCC_OscConfig+0x330>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d15c      	bne.n	800155a <HAL_RCC_OscConfig+0x10e>
 80014a0:	4bb6      	ldr	r3, [pc, #728]	; (800177c <HAL_RCC_OscConfig+0x330>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ac:	d155      	bne.n	800155a <HAL_RCC_OscConfig+0x10e>
 80014ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c6:	fab3 f383 	clz	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	095b      	lsrs	r3, r3, #5
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d102      	bne.n	80014e0 <HAL_RCC_OscConfig+0x94>
 80014da:	4ba8      	ldr	r3, [pc, #672]	; (800177c <HAL_RCC_OscConfig+0x330>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	e015      	b.n	800150c <HAL_RCC_OscConfig+0xc0>
 80014e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80014ec:	fa93 f3a3 	rbit	r3, r3
 80014f0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80014f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80014fc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001500:	fa93 f3a3 	rbit	r3, r3
 8001504:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001508:	4b9c      	ldr	r3, [pc, #624]	; (800177c <HAL_RCC_OscConfig+0x330>)
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001510:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001514:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001518:	fa92 f2a2 	rbit	r2, r2
 800151c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001520:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001524:	fab2 f282 	clz	r2, r2
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	f042 0220 	orr.w	r2, r2, #32
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	f002 021f 	and.w	r2, r2, #31
 8001534:	2101      	movs	r1, #1
 8001536:	fa01 f202 	lsl.w	r2, r1, r2
 800153a:	4013      	ands	r3, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 811f 	beq.w	8001780 <HAL_RCC_OscConfig+0x334>
 8001542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 8116 	bne.w	8001780 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	f000 bfaf 	b.w	80024b8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x12e>
 800156c:	4b83      	ldr	r3, [pc, #524]	; (800177c <HAL_RCC_OscConfig+0x330>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a82      	ldr	r2, [pc, #520]	; (800177c <HAL_RCC_OscConfig+0x330>)
 8001572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e036      	b.n	80015e8 <HAL_RCC_OscConfig+0x19c>
 800157a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x158>
 800158a:	4b7c      	ldr	r3, [pc, #496]	; (800177c <HAL_RCC_OscConfig+0x330>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a7b      	ldr	r2, [pc, #492]	; (800177c <HAL_RCC_OscConfig+0x330>)
 8001590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b79      	ldr	r3, [pc, #484]	; (800177c <HAL_RCC_OscConfig+0x330>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a78      	ldr	r2, [pc, #480]	; (800177c <HAL_RCC_OscConfig+0x330>)
 800159c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e021      	b.n	80015e8 <HAL_RCC_OscConfig+0x19c>
 80015a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x184>
 80015b6:	4b71      	ldr	r3, [pc, #452]	; (800177c <HAL_RCC_OscConfig+0x330>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a70      	ldr	r2, [pc, #448]	; (800177c <HAL_RCC_OscConfig+0x330>)
 80015bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b6e      	ldr	r3, [pc, #440]	; (800177c <HAL_RCC_OscConfig+0x330>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a6d      	ldr	r2, [pc, #436]	; (800177c <HAL_RCC_OscConfig+0x330>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0x19c>
 80015d0:	4b6a      	ldr	r3, [pc, #424]	; (800177c <HAL_RCC_OscConfig+0x330>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a69      	ldr	r2, [pc, #420]	; (800177c <HAL_RCC_OscConfig+0x330>)
 80015d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b67      	ldr	r3, [pc, #412]	; (800177c <HAL_RCC_OscConfig+0x330>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a66      	ldr	r2, [pc, #408]	; (800177c <HAL_RCC_OscConfig+0x330>)
 80015e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015e8:	4b64      	ldr	r3, [pc, #400]	; (800177c <HAL_RCC_OscConfig+0x330>)
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	f023 020f 	bic.w	r2, r3, #15
 80015f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	495f      	ldr	r1, [pc, #380]	; (800177c <HAL_RCC_OscConfig+0x330>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001606:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d059      	beq.n	80016c6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff fc0d 	bl	8000e30 <HAL_GetTick>
 8001616:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff fc08 	bl	8000e30 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b64      	cmp	r3, #100	; 0x64
 800162a:	d902      	bls.n	8001632 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	f000 bf43 	b.w	80024b8 <HAL_RCC_OscConfig+0x106c>
 8001632:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001636:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001646:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	fab3 f383 	clz	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	095b      	lsrs	r3, r3, #5
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b01      	cmp	r3, #1
 800165c:	d102      	bne.n	8001664 <HAL_RCC_OscConfig+0x218>
 800165e:	4b47      	ldr	r3, [pc, #284]	; (800177c <HAL_RCC_OscConfig+0x330>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e015      	b.n	8001690 <HAL_RCC_OscConfig+0x244>
 8001664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001668:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001670:	fa93 f3a3 	rbit	r3, r3
 8001674:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001678:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800167c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001680:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001684:	fa93 f3a3 	rbit	r3, r3
 8001688:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800168c:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_RCC_OscConfig+0x330>)
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001694:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001698:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800169c:	fa92 f2a2 	rbit	r2, r2
 80016a0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80016a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80016a8:	fab2 f282 	clz	r2, r2
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	f042 0220 	orr.w	r2, r2, #32
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	f002 021f 	and.w	r2, r2, #31
 80016b8:	2101      	movs	r1, #1
 80016ba:	fa01 f202 	lsl.w	r2, r1, r2
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ab      	beq.n	800161c <HAL_RCC_OscConfig+0x1d0>
 80016c4:	e05d      	b.n	8001782 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff fbb3 	bl	8000e30 <HAL_GetTick>
 80016ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d0:	f7ff fbae 	bl	8000e30 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b64      	cmp	r3, #100	; 0x64
 80016de:	d902      	bls.n	80016e6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	f000 bee9 	b.w	80024b8 <HAL_RCC_OscConfig+0x106c>
 80016e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80016f2:	fa93 f3a3 	rbit	r3, r3
 80016f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80016fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	fab3 f383 	clz	r3, r3
 8001702:	b2db      	uxtb	r3, r3
 8001704:	095b      	lsrs	r3, r3, #5
 8001706:	b2db      	uxtb	r3, r3
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b01      	cmp	r3, #1
 8001710:	d102      	bne.n	8001718 <HAL_RCC_OscConfig+0x2cc>
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <HAL_RCC_OscConfig+0x330>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	e015      	b.n	8001744 <HAL_RCC_OscConfig+0x2f8>
 8001718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800171c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001724:	fa93 f3a3 	rbit	r3, r3
 8001728:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800172c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001730:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001734:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001738:	fa93 f3a3 	rbit	r3, r3
 800173c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_RCC_OscConfig+0x330>)
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001748:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800174c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001750:	fa92 f2a2 	rbit	r2, r2
 8001754:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001758:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800175c:	fab2 f282 	clz	r2, r2
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	f042 0220 	orr.w	r2, r2, #32
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	f002 021f 	and.w	r2, r2, #31
 800176c:	2101      	movs	r1, #1
 800176e:	fa01 f202 	lsl.w	r2, r1, r2
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ab      	bne.n	80016d0 <HAL_RCC_OscConfig+0x284>
 8001778:	e003      	b.n	8001782 <HAL_RCC_OscConfig+0x336>
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001782:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 817d 	beq.w	8001a92 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001798:	4ba6      	ldr	r3, [pc, #664]	; (8001a34 <HAL_RCC_OscConfig+0x5e8>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00b      	beq.n	80017bc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017a4:	4ba3      	ldr	r3, [pc, #652]	; (8001a34 <HAL_RCC_OscConfig+0x5e8>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d172      	bne.n	8001896 <HAL_RCC_OscConfig+0x44a>
 80017b0:	4ba0      	ldr	r3, [pc, #640]	; (8001a34 <HAL_RCC_OscConfig+0x5e8>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d16c      	bne.n	8001896 <HAL_RCC_OscConfig+0x44a>
 80017bc:	2302      	movs	r3, #2
 80017be:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80017ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d102      	bne.n	80017ec <HAL_RCC_OscConfig+0x3a0>
 80017e6:	4b93      	ldr	r3, [pc, #588]	; (8001a34 <HAL_RCC_OscConfig+0x5e8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	e013      	b.n	8001814 <HAL_RCC_OscConfig+0x3c8>
 80017ec:	2302      	movs	r3, #2
 80017ee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80017f6:	fa93 f3a3 	rbit	r3, r3
 80017fa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017fe:	2302      	movs	r3, #2
 8001800:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001804:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001810:	4b88      	ldr	r3, [pc, #544]	; (8001a34 <HAL_RCC_OscConfig+0x5e8>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	2202      	movs	r2, #2
 8001816:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800181a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800181e:	fa92 f2a2 	rbit	r2, r2
 8001822:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001826:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800182a:	fab2 f282 	clz	r2, r2
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	f042 0220 	orr.w	r2, r2, #32
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	f002 021f 	and.w	r2, r2, #31
 800183a:	2101      	movs	r1, #1
 800183c:	fa01 f202 	lsl.w	r2, r1, r2
 8001840:	4013      	ands	r3, r2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00a      	beq.n	800185c <HAL_RCC_OscConfig+0x410>
 8001846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d002      	beq.n	800185c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	f000 be2e 	b.w	80024b8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185c:	4b75      	ldr	r3, [pc, #468]	; (8001a34 <HAL_RCC_OscConfig+0x5e8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	21f8      	movs	r1, #248	; 0xf8
 8001872:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001876:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800187a:	fa91 f1a1 	rbit	r1, r1
 800187e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001882:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001886:	fab1 f181 	clz	r1, r1
 800188a:	b2c9      	uxtb	r1, r1
 800188c:	408b      	lsls	r3, r1
 800188e:	4969      	ldr	r1, [pc, #420]	; (8001a34 <HAL_RCC_OscConfig+0x5e8>)
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001894:	e0fd      	b.n	8001a92 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 8088 	beq.w	80019b8 <HAL_RCC_OscConfig+0x56c>
 80018a8:	2301      	movs	r3, #1
 80018aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80018ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	461a      	mov	r2, r3
 80018d0:	2301      	movs	r3, #1
 80018d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff faac 	bl	8000e30 <HAL_GetTick>
 80018d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018de:	f7ff faa7 	bl	8000e30 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d902      	bls.n	80018f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	f000 bde2 	b.w	80024b8 <HAL_RCC_OscConfig+0x106c>
 80018f4:	2302      	movs	r3, #2
 80018f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80018fe:	fa93 f3a3 	rbit	r3, r3
 8001902:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001906:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	095b      	lsrs	r3, r3, #5
 8001912:	b2db      	uxtb	r3, r3
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d102      	bne.n	8001924 <HAL_RCC_OscConfig+0x4d8>
 800191e:	4b45      	ldr	r3, [pc, #276]	; (8001a34 <HAL_RCC_OscConfig+0x5e8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	e013      	b.n	800194c <HAL_RCC_OscConfig+0x500>
 8001924:	2302      	movs	r3, #2
 8001926:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001936:	2302      	movs	r3, #2
 8001938:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800193c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001948:	4b3a      	ldr	r3, [pc, #232]	; (8001a34 <HAL_RCC_OscConfig+0x5e8>)
 800194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194c:	2202      	movs	r2, #2
 800194e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001952:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001956:	fa92 f2a2 	rbit	r2, r2
 800195a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800195e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001962:	fab2 f282 	clz	r2, r2
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	f042 0220 	orr.w	r2, r2, #32
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	f002 021f 	and.w	r2, r2, #31
 8001972:	2101      	movs	r1, #1
 8001974:	fa01 f202 	lsl.w	r2, r1, r2
 8001978:	4013      	ands	r3, r2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0af      	beq.n	80018de <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <HAL_RCC_OscConfig+0x5e8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800198a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	21f8      	movs	r1, #248	; 0xf8
 8001994:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800199c:	fa91 f1a1 	rbit	r1, r1
 80019a0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80019a4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80019a8:	fab1 f181 	clz	r1, r1
 80019ac:	b2c9      	uxtb	r1, r1
 80019ae:	408b      	lsls	r3, r1
 80019b0:	4920      	ldr	r1, [pc, #128]	; (8001a34 <HAL_RCC_OscConfig+0x5e8>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
 80019b6:	e06c      	b.n	8001a92 <HAL_RCC_OscConfig+0x646>
 80019b8:	2301      	movs	r3, #1
 80019ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80019ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	461a      	mov	r2, r3
 80019e0:	2300      	movs	r3, #0
 80019e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fa24 	bl	8000e30 <HAL_GetTick>
 80019e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ee:	f7ff fa1f 	bl	8000e30 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d902      	bls.n	8001a04 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	f000 bd5a 	b.w	80024b8 <HAL_RCC_OscConfig+0x106c>
 8001a04:	2302      	movs	r3, #2
 8001a06:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a0e:	fa93 f3a3 	rbit	r3, r3
 8001a12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	095b      	lsrs	r3, r3, #5
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d104      	bne.n	8001a38 <HAL_RCC_OscConfig+0x5ec>
 8001a2e:	4b01      	ldr	r3, [pc, #4]	; (8001a34 <HAL_RCC_OscConfig+0x5e8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	e015      	b.n	8001a60 <HAL_RCC_OscConfig+0x614>
 8001a34:	40021000 	.word	0x40021000
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a50:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a5c:	4bc8      	ldr	r3, [pc, #800]	; (8001d80 <HAL_RCC_OscConfig+0x934>)
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	2202      	movs	r2, #2
 8001a62:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001a66:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a6a:	fa92 f2a2 	rbit	r2, r2
 8001a6e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001a72:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a76:	fab2 f282 	clz	r2, r2
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f042 0220 	orr.w	r2, r2, #32
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	f002 021f 	and.w	r2, r2, #31
 8001a86:	2101      	movs	r1, #1
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1ad      	bne.n	80019ee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8110 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d079      	beq.n	8001bac <HAL_RCC_OscConfig+0x760>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4bab      	ldr	r3, [pc, #684]	; (8001d84 <HAL_RCC_OscConfig+0x938>)
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	461a      	mov	r2, r3
 8001ade:	2301      	movs	r3, #1
 8001ae0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f9a5 	bl	8000e30 <HAL_GetTick>
 8001ae6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff f9a0 	bl	8000e30 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d902      	bls.n	8001b02 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	f000 bcdb 	b.w	80024b8 <HAL_RCC_OscConfig+0x106c>
 8001b02:	2302      	movs	r3, #2
 8001b04:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b0c:	fa93 f3a3 	rbit	r3, r3
 8001b10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b18:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b24:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	fa93 f2a3 	rbit	r2, r3
 8001b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b40:	2202      	movs	r2, #2
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	fa93 f2a3 	rbit	r2, r3
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b5a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5c:	4b88      	ldr	r3, [pc, #544]	; (8001d80 <HAL_RCC_OscConfig+0x934>)
 8001b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b68:	2102      	movs	r1, #2
 8001b6a:	6019      	str	r1, [r3, #0]
 8001b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	fa93 f1a3 	rbit	r1, r3
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b82:	6019      	str	r1, [r3, #0]
  return result;
 8001b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b88:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	fab3 f383 	clz	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0a0      	beq.n	8001aec <HAL_RCC_OscConfig+0x6a0>
 8001baa:	e08d      	b.n	8001cc8 <HAL_RCC_OscConfig+0x87c>
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	fa93 f2a3 	rbit	r2, r3
 8001bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bce:	601a      	str	r2, [r3, #0]
  return result;
 8001bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bd8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bda:	fab3 f383 	clz	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b68      	ldr	r3, [pc, #416]	; (8001d84 <HAL_RCC_OscConfig+0x938>)
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	461a      	mov	r2, r3
 8001bea:	2300      	movs	r3, #0
 8001bec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7ff f91f 	bl	8000e30 <HAL_GetTick>
 8001bf2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff f91a 	bl	8000e30 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d902      	bls.n	8001c0e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	f000 bc55 	b.w	80024b8 <HAL_RCC_OscConfig+0x106c>
 8001c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c12:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c16:	2202      	movs	r2, #2
 8001c18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	fa93 f2a3 	rbit	r2, r3
 8001c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c36:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	fa93 f2a3 	rbit	r2, r3
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c5e:	2202      	movs	r2, #2
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	fa93 f2a3 	rbit	r2, r3
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c78:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7a:	4b41      	ldr	r3, [pc, #260]	; (8001d80 <HAL_RCC_OscConfig+0x934>)
 8001c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c82:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c86:	2102      	movs	r1, #2
 8001c88:	6019      	str	r1, [r3, #0]
 8001c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	fa93 f1a3 	rbit	r1, r3
 8001c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ca0:	6019      	str	r1, [r3, #0]
  return result;
 8001ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fab3 f383 	clz	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d197      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ccc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 81a1 	beq.w	8002020 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <HAL_RCC_OscConfig+0x934>)
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d116      	bne.n	8001d1e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf0:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <HAL_RCC_OscConfig+0x934>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <HAL_RCC_OscConfig+0x934>)
 8001cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	61d3      	str	r3, [r2, #28]
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_RCC_OscConfig+0x934>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d08:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d12:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001d16:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_RCC_OscConfig+0x93c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d11a      	bne.n	8001d60 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_RCC_OscConfig+0x93c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a16      	ldr	r2, [pc, #88]	; (8001d88 <HAL_RCC_OscConfig+0x93c>)
 8001d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d36:	f7ff f87b 	bl	8000e30 <HAL_GetTick>
 8001d3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	e009      	b.n	8001d54 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d40:	f7ff f876 	bl	8000e30 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b64      	cmp	r3, #100	; 0x64
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e3b1      	b.n	80024b8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <HAL_RCC_OscConfig+0x93c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ef      	beq.n	8001d40 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d10d      	bne.n	8001d8c <HAL_RCC_OscConfig+0x940>
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_RCC_OscConfig+0x934>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4a02      	ldr	r2, [pc, #8]	; (8001d80 <HAL_RCC_OscConfig+0x934>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6213      	str	r3, [r2, #32]
 8001d7c:	e03c      	b.n	8001df8 <HAL_RCC_OscConfig+0x9ac>
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	10908120 	.word	0x10908120
 8001d88:	40007000 	.word	0x40007000
 8001d8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCC_OscConfig+0x96a>
 8001d9c:	4bc1      	ldr	r3, [pc, #772]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4ac0      	ldr	r2, [pc, #768]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	6213      	str	r3, [r2, #32]
 8001da8:	4bbe      	ldr	r3, [pc, #760]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4abd      	ldr	r2, [pc, #756]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001dae:	f023 0304 	bic.w	r3, r3, #4
 8001db2:	6213      	str	r3, [r2, #32]
 8001db4:	e020      	b.n	8001df8 <HAL_RCC_OscConfig+0x9ac>
 8001db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	2b05      	cmp	r3, #5
 8001dc4:	d10c      	bne.n	8001de0 <HAL_RCC_OscConfig+0x994>
 8001dc6:	4bb7      	ldr	r3, [pc, #732]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4ab6      	ldr	r2, [pc, #728]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6213      	str	r3, [r2, #32]
 8001dd2:	4bb4      	ldr	r3, [pc, #720]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4ab3      	ldr	r2, [pc, #716]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6213      	str	r3, [r2, #32]
 8001dde:	e00b      	b.n	8001df8 <HAL_RCC_OscConfig+0x9ac>
 8001de0:	4bb0      	ldr	r3, [pc, #704]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4aaf      	ldr	r2, [pc, #700]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	6213      	str	r3, [r2, #32]
 8001dec:	4bad      	ldr	r3, [pc, #692]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4aac      	ldr	r2, [pc, #688]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001df2:	f023 0304 	bic.w	r3, r3, #4
 8001df6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 8081 	beq.w	8001f0c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff f811 	bl	8000e30 <HAL_GetTick>
 8001e0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e12:	e00b      	b.n	8001e2c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e14:	f7ff f80c 	bl	8000e30 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e345      	b.n	80024b8 <HAL_RCC_OscConfig+0x106c>
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e34:	2202      	movs	r2, #2
 8001e36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e58:	2202      	movs	r2, #2
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	fa93 f2a3 	rbit	r2, r3
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e72:	601a      	str	r2, [r3, #0]
  return result;
 8001e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e78:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	095b      	lsrs	r3, r3, #5
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d102      	bne.n	8001e98 <HAL_RCC_OscConfig+0xa4c>
 8001e92:	4b84      	ldr	r3, [pc, #528]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	e013      	b.n	8001ec0 <HAL_RCC_OscConfig+0xa74>
 8001e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	fa93 f2a3 	rbit	r2, r3
 8001eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	4b79      	ldr	r3, [pc, #484]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ec4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001ec8:	2102      	movs	r1, #2
 8001eca:	6011      	str	r1, [r2, #0]
 8001ecc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ed0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	fa92 f1a2 	rbit	r1, r2
 8001eda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ede:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ee2:	6011      	str	r1, [r2, #0]
  return result;
 8001ee4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ee8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	fab2 f282 	clz	r2, r2
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f002 021f 	and.w	r2, r2, #31
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f202 	lsl.w	r2, r1, r2
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d084      	beq.n	8001e14 <HAL_RCC_OscConfig+0x9c8>
 8001f0a:	e07f      	b.n	800200c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0c:	f7fe ff90 	bl	8000e30 <HAL_GetTick>
 8001f10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f14:	e00b      	b.n	8001f2e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7fe ff8b 	bl	8000e30 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e2c4      	b.n	80024b8 <HAL_RCC_OscConfig+0x106c>
 8001f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f32:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f36:	2202      	movs	r2, #2
 8001f38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f3e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	fa93 f2a3 	rbit	r2, r3
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f62:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	fa93 f2a3 	rbit	r2, r3
 8001f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f70:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f74:	601a      	str	r2, [r3, #0]
  return result;
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f043 0302 	orr.w	r3, r3, #2
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d102      	bne.n	8001f9a <HAL_RCC_OscConfig+0xb4e>
 8001f94:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	e013      	b.n	8001fc2 <HAL_RCC_OscConfig+0xb76>
 8001f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f2a3 	rbit	r2, r3
 8001fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fc6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001fca:	2102      	movs	r1, #2
 8001fcc:	6011      	str	r1, [r2, #0]
 8001fce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fd2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	fa92 f1a2 	rbit	r1, r2
 8001fdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fe0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001fe4:	6011      	str	r1, [r2, #0]
  return result;
 8001fe6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001fea:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	fab2 f282 	clz	r2, r2
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	f002 021f 	and.w	r2, r2, #31
 8002000:	2101      	movs	r1, #1
 8002002:	fa01 f202 	lsl.w	r2, r1, r2
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d184      	bne.n	8001f16 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800200c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002014:	4b23      	ldr	r3, [pc, #140]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	4a22      	ldr	r2, [pc, #136]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 800201a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002024:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8242 	beq.w	80024b6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <HAL_RCC_OscConfig+0xc58>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b08      	cmp	r3, #8
 800203c:	f000 8213 	beq.w	8002466 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002044:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	2b02      	cmp	r3, #2
 800204e:	f040 8162 	bne.w	8002316 <HAL_RCC_OscConfig+0xeca>
 8002052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002056:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800205a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800205e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002064:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	fa93 f2a3 	rbit	r2, r3
 800206e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002072:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002076:	601a      	str	r2, [r3, #0]
  return result;
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002080:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800208c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	461a      	mov	r2, r3
 8002094:	2300      	movs	r3, #0
 8002096:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe feca 	bl	8000e30 <HAL_GetTick>
 800209c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a0:	e00c      	b.n	80020bc <HAL_RCC_OscConfig+0xc70>
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a8:	f7fe fec2 	bl	8000e30 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e1fd      	b.n	80024b8 <HAL_RCC_OscConfig+0x106c>
 80020bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ce:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	fa93 f2a3 	rbit	r2, r3
 80020d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020dc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80020e0:	601a      	str	r2, [r3, #0]
  return result;
 80020e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80020ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ec:	fab3 f383 	clz	r3, r3
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d102      	bne.n	8002106 <HAL_RCC_OscConfig+0xcba>
 8002100:	4bb0      	ldr	r3, [pc, #704]	; (80023c4 <HAL_RCC_OscConfig+0xf78>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	e027      	b.n	8002156 <HAL_RCC_OscConfig+0xd0a>
 8002106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800210e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002118:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	fa93 f2a3 	rbit	r2, r3
 8002122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002126:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002130:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002134:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	fa93 f2a3 	rbit	r2, r3
 8002148:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800214c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	4b9c      	ldr	r3, [pc, #624]	; (80023c4 <HAL_RCC_OscConfig+0xf78>)
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800215a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800215e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002162:	6011      	str	r1, [r2, #0]
 8002164:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002168:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	fa92 f1a2 	rbit	r1, r2
 8002172:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002176:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800217a:	6011      	str	r1, [r2, #0]
  return result;
 800217c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002180:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	fab2 f282 	clz	r2, r2
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	f042 0220 	orr.w	r2, r2, #32
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	f002 021f 	and.w	r2, r2, #31
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f202 	lsl.w	r2, r1, r2
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d182      	bne.n	80020a8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a2:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <HAL_RCC_OscConfig+0xf78>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	430b      	orrs	r3, r1
 80021c4:	497f      	ldr	r1, [pc, #508]	; (80023c4 <HAL_RCC_OscConfig+0xf78>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
 80021ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ce:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80021d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021dc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	fa93 f2a3 	rbit	r2, r3
 80021e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021ee:	601a      	str	r2, [r3, #0]
  return result;
 80021f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021f8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002204:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	461a      	mov	r2, r3
 800220c:	2301      	movs	r3, #1
 800220e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fe0e 	bl	8000e30 <HAL_GetTick>
 8002214:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002218:	e009      	b.n	800222e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe fe09 	bl	8000e30 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e144      	b.n	80024b8 <HAL_RCC_OscConfig+0x106c>
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002236:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800223a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002240:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	fa93 f2a3 	rbit	r2, r3
 800224a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002252:	601a      	str	r2, [r3, #0]
  return result;
 8002254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002258:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800225c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d102      	bne.n	8002278 <HAL_RCC_OscConfig+0xe2c>
 8002272:	4b54      	ldr	r3, [pc, #336]	; (80023c4 <HAL_RCC_OscConfig+0xf78>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	e027      	b.n	80022c8 <HAL_RCC_OscConfig+0xe7c>
 8002278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002280:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	fa93 f2a3 	rbit	r2, r3
 8002294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002298:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	fa93 f2a3 	rbit	r2, r3
 80022ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022be:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	4b3f      	ldr	r3, [pc, #252]	; (80023c4 <HAL_RCC_OscConfig+0xf78>)
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022cc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80022d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022d4:	6011      	str	r1, [r2, #0]
 80022d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022da:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	fa92 f1a2 	rbit	r1, r2
 80022e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022e8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022ec:	6011      	str	r1, [r2, #0]
  return result;
 80022ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022f2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	fab2 f282 	clz	r2, r2
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	f042 0220 	orr.w	r2, r2, #32
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	f002 021f 	and.w	r2, r2, #31
 8002308:	2101      	movs	r1, #1
 800230a:	fa01 f202 	lsl.w	r2, r1, r2
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d082      	beq.n	800221a <HAL_RCC_OscConfig+0xdce>
 8002314:	e0cf      	b.n	80024b6 <HAL_RCC_OscConfig+0x106a>
 8002316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800231e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002322:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002328:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	fa93 f2a3 	rbit	r2, r3
 8002332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002336:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800233a:	601a      	str	r2, [r3, #0]
  return result;
 800233c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002340:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002344:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002350:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	461a      	mov	r2, r3
 8002358:	2300      	movs	r3, #0
 800235a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7fe fd68 	bl	8000e30 <HAL_GetTick>
 8002360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002364:	e009      	b.n	800237a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002366:	f7fe fd63 	bl	8000e30 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e09e      	b.n	80024b8 <HAL_RCC_OscConfig+0x106c>
 800237a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002382:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002386:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	fa93 f2a3 	rbit	r2, r3
 8002396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800239e:	601a      	str	r2, [r3, #0]
  return result;
 80023a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d104      	bne.n	80023c8 <HAL_RCC_OscConfig+0xf7c>
 80023be:	4b01      	ldr	r3, [pc, #4]	; (80023c4 <HAL_RCC_OscConfig+0xf78>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	e029      	b.n	8002418 <HAL_RCC_OscConfig+0xfcc>
 80023c4:	40021000 	.word	0x40021000
 80023c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023cc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80023d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023da:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	fa93 f2a3 	rbit	r2, r3
 80023e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80023f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002400:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	fa93 f2a3 	rbit	r2, r3
 800240a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	4b2b      	ldr	r3, [pc, #172]	; (80024c4 <HAL_RCC_OscConfig+0x1078>)
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800241c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002420:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002424:	6011      	str	r1, [r2, #0]
 8002426:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800242a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	fa92 f1a2 	rbit	r1, r2
 8002434:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002438:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800243c:	6011      	str	r1, [r2, #0]
  return result;
 800243e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002442:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	fab2 f282 	clz	r2, r2
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	f042 0220 	orr.w	r2, r2, #32
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	f002 021f 	and.w	r2, r2, #31
 8002458:	2101      	movs	r1, #1
 800245a:	fa01 f202 	lsl.w	r2, r1, r2
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d180      	bne.n	8002366 <HAL_RCC_OscConfig+0xf1a>
 8002464:	e027      	b.n	80024b6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e01e      	b.n	80024b8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_RCC_OscConfig+0x1078>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002482:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002486:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800248a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	429a      	cmp	r2, r3
 8002498:	d10b      	bne.n	80024b2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800249a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800249e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000

080024c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b09e      	sub	sp, #120	; 0x78
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e162      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b90      	ldr	r3, [pc, #576]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d910      	bls.n	8002510 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b8d      	ldr	r3, [pc, #564]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 0207 	bic.w	r2, r3, #7
 80024f6:	498b      	ldr	r1, [pc, #556]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b89      	ldr	r3, [pc, #548]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e14a      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251c:	4b82      	ldr	r3, [pc, #520]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	497f      	ldr	r1, [pc, #508]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80dc 	beq.w	80026f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d13c      	bne.n	80025be <HAL_RCC_ClockConfig+0xf6>
 8002544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002548:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d102      	bne.n	800256e <HAL_RCC_ClockConfig+0xa6>
 8002568:	4b6f      	ldr	r3, [pc, #444]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	e00f      	b.n	800258e <HAL_RCC_ClockConfig+0xc6>
 800256e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002572:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	667b      	str	r3, [r7, #100]	; 0x64
 800257c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002580:	663b      	str	r3, [r7, #96]	; 0x60
 8002582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	65fb      	str	r3, [r7, #92]	; 0x5c
 800258a:	4b67      	ldr	r3, [pc, #412]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002592:	65ba      	str	r2, [r7, #88]	; 0x58
 8002594:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002596:	fa92 f2a2 	rbit	r2, r2
 800259a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800259c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800259e:	fab2 f282 	clz	r2, r2
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	f042 0220 	orr.w	r2, r2, #32
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	f002 021f 	and.w	r2, r2, #31
 80025ae:	2101      	movs	r1, #1
 80025b0:	fa01 f202 	lsl.w	r2, r1, r2
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d17b      	bne.n	80026b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0f3      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d13c      	bne.n	8002640 <HAL_RCC_ClockConfig+0x178>
 80025c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	095b      	lsrs	r3, r3, #5
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d102      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x128>
 80025ea:	4b4f      	ldr	r3, [pc, #316]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	e00f      	b.n	8002610 <HAL_RCC_ClockConfig+0x148>
 80025f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	647b      	str	r3, [r7, #68]	; 0x44
 80025fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002602:	643b      	str	r3, [r7, #64]	; 0x40
 8002604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800260c:	4b46      	ldr	r3, [pc, #280]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002614:	63ba      	str	r2, [r7, #56]	; 0x38
 8002616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002618:	fa92 f2a2 	rbit	r2, r2
 800261c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800261e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002620:	fab2 f282 	clz	r2, r2
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	f042 0220 	orr.w	r2, r2, #32
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	f002 021f 	and.w	r2, r2, #31
 8002630:	2101      	movs	r1, #1
 8002632:	fa01 f202 	lsl.w	r2, r1, r2
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d13a      	bne.n	80026b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0b2      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2de>
 8002640:	2302      	movs	r3, #2
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d102      	bne.n	8002668 <HAL_RCC_ClockConfig+0x1a0>
 8002662:	4b31      	ldr	r3, [pc, #196]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	e00d      	b.n	8002684 <HAL_RCC_ClockConfig+0x1bc>
 8002668:	2302      	movs	r3, #2
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
 8002674:	2302      	movs	r3, #2
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	61fb      	str	r3, [r7, #28]
 8002680:	4b29      	ldr	r3, [pc, #164]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	2202      	movs	r2, #2
 8002686:	61ba      	str	r2, [r7, #24]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	fa92 f2a2 	rbit	r2, r2
 800268e:	617a      	str	r2, [r7, #20]
  return result;
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	fab2 f282 	clz	r2, r2
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	f042 0220 	orr.w	r2, r2, #32
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	f002 021f 	and.w	r2, r2, #31
 80026a2:	2101      	movs	r1, #1
 80026a4:	fa01 f202 	lsl.w	r2, r1, r2
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e079      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	491a      	ldr	r1, [pc, #104]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c4:	f7fe fbb4 	bl	8000e30 <HAL_GetTick>
 80026c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026cc:	f7fe fbb0 	bl	8000e30 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e061      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 020c 	and.w	r2, r3, #12
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d1eb      	bne.n	80026cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d214      	bcs.n	800272c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0207 	bic.w	r2, r3, #7
 800270a:	4906      	ldr	r1, [pc, #24]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b04      	ldr	r3, [pc, #16]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d005      	beq.n	800272c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e040      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2de>
 8002724:	40022000 	.word	0x40022000
 8002728:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002738:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <HAL_RCC_ClockConfig+0x2e8>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	491a      	ldr	r1, [pc, #104]	; (80027b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002756:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4912      	ldr	r1, [pc, #72]	; (80027b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800276a:	f000 f829 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 800276e:	4601      	mov	r1, r0
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002778:	22f0      	movs	r2, #240	; 0xf0
 800277a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	fa92 f2a2 	rbit	r2, r2
 8002782:	60fa      	str	r2, [r7, #12]
  return result;
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	fab2 f282 	clz	r2, r2
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	40d3      	lsrs	r3, r2
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x2ec>)
 8002790:	5cd3      	ldrb	r3, [r2, r3]
 8002792:	fa21 f303 	lsr.w	r3, r1, r3
 8002796:	4a08      	ldr	r2, [pc, #32]	; (80027b8 <HAL_RCC_ClockConfig+0x2f0>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <HAL_RCC_ClockConfig+0x2f4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fb02 	bl	8000da8 <HAL_InitTick>
  
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3778      	adds	r7, #120	; 0x78
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	08004aa0 	.word	0x08004aa0
 80027b8:	20000010 	.word	0x20000010
 80027bc:	20000014 	.word	0x20000014

080027c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b08b      	sub	sp, #44	; 0x2c
 80027c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	2300      	movs	r3, #0
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80027da:	4b29      	ldr	r3, [pc, #164]	; (8002880 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d002      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x30>
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d003      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x36>
 80027ee:	e03c      	b.n	800286a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027f0:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027f2:	623b      	str	r3, [r7, #32]
      break;
 80027f4:	e03c      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80027fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002800:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	fa92 f2a2 	rbit	r2, r2
 8002808:	607a      	str	r2, [r7, #4]
  return result;
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	fab2 f282 	clz	r2, r2
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	40d3      	lsrs	r3, r2
 8002814:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002816:	5cd3      	ldrb	r3, [r2, r3]
 8002818:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800281a:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCC_GetSysClockFreq+0xc0>)
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	220f      	movs	r2, #15
 8002824:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	fa92 f2a2 	rbit	r2, r2
 800282c:	60fa      	str	r2, [r7, #12]
  return result;
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	40d3      	lsrs	r3, r2
 8002838:	4a14      	ldr	r2, [pc, #80]	; (800288c <HAL_RCC_GetSysClockFreq+0xcc>)
 800283a:	5cd3      	ldrb	r3, [r2, r3]
 800283c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002848:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <HAL_RCC_GetSysClockFreq+0xc4>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fb02 f303 	mul.w	r3, r2, r3
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
 8002858:	e004      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	4a0c      	ldr	r2, [pc, #48]	; (8002890 <HAL_RCC_GetSysClockFreq+0xd0>)
 800285e:	fb02 f303 	mul.w	r3, r2, r3
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	623b      	str	r3, [r7, #32]
      break;
 8002868:	e002      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCC_GetSysClockFreq+0xc4>)
 800286c:	623b      	str	r3, [r7, #32]
      break;
 800286e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002870:	6a3b      	ldr	r3, [r7, #32]
}
 8002872:	4618      	mov	r0, r3
 8002874:	372c      	adds	r7, #44	; 0x2c
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	007a1200 	.word	0x007a1200
 8002888:	08004ab8 	.word	0x08004ab8
 800288c:	08004ac8 	.word	0x08004ac8
 8002890:	003d0900 	.word	0x003d0900

08002894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000010 	.word	0x20000010

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028b2:	f7ff ffef 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028b6:	4601      	mov	r1, r0
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	fa92 f2a2 	rbit	r2, r2
 80028cc:	603a      	str	r2, [r7, #0]
  return result;
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	fab2 f282 	clz	r2, r2
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	40d3      	lsrs	r3, r2
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80028da:	5cd3      	ldrb	r3, [r2, r3]
 80028dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	08004ab0 	.word	0x08004ab0

080028f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028f6:	f7ff ffcd 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028fa:	4601      	mov	r1, r0
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002904:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002908:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	fa92 f2a2 	rbit	r2, r2
 8002910:	603a      	str	r2, [r7, #0]
  return result;
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	fab2 f282 	clz	r2, r2
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	40d3      	lsrs	r3, r2
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x40>)
 800291e:	5cd3      	ldrb	r3, [r2, r3]
 8002920:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000
 8002930:	08004ab0 	.word	0x08004ab0

08002934 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b092      	sub	sp, #72	; 0x48
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002944:	2300      	movs	r3, #0
 8002946:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80d4 	beq.w	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002958:	4b4e      	ldr	r3, [pc, #312]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10e      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002964:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	4a4a      	ldr	r2, [pc, #296]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296e:	61d3      	str	r3, [r2, #28]
 8002970:	4b48      	ldr	r3, [pc, #288]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297c:	2301      	movs	r3, #1
 800297e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002982:	4b45      	ldr	r3, [pc, #276]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d118      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800298e:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a41      	ldr	r2, [pc, #260]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002998:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299a:	f7fe fa49 	bl	8000e30 <HAL_GetTick>
 800299e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a0:	e008      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a2:	f7fe fa45 	bl	8000e30 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b64      	cmp	r3, #100	; 0x64
 80029ae:	d901      	bls.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e169      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b4:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029c0:	4b34      	ldr	r3, [pc, #208]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8084 	beq.w	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029dc:	429a      	cmp	r2, r3
 80029de:	d07c      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029e0:	4b2c      	ldr	r3, [pc, #176]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2300      	movs	r3, #0
 8002a30:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a32:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a36:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d04b      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7fe f9f5 	bl	8000e30 <HAL_GetTick>
 8002a46:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a48:	e00a      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4a:	f7fe f9f1 	bl	8000e30 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e113      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002a60:	2302      	movs	r3, #2
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	623b      	str	r3, [r7, #32]
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	61fb      	str	r3, [r7, #28]
  return result;
 8002a78:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d108      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a8e:	4b01      	ldr	r3, [pc, #4]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	e00d      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40007000 	.word	0x40007000
 8002a9c:	10908100 	.word	0x10908100
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	4b78      	ldr	r3, [pc, #480]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	613a      	str	r2, [r7, #16]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	fa92 f2a2 	rbit	r2, r2
 8002aba:	60fa      	str	r2, [r7, #12]
  return result;
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	fab2 f282 	clz	r2, r2
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	f002 021f 	and.w	r2, r2, #31
 8002ace:	2101      	movs	r1, #1
 8002ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0b7      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ada:	4b6d      	ldr	r3, [pc, #436]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	496a      	ldr	r1, [pc, #424]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002aec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d105      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af4:	4b66      	ldr	r3, [pc, #408]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	4a65      	ldr	r2, [pc, #404]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b0c:	4b60      	ldr	r3, [pc, #384]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	f023 0203 	bic.w	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	495d      	ldr	r1, [pc, #372]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b2a:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4956      	ldr	r1, [pc, #344]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b48:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	494e      	ldr	r1, [pc, #312]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b66:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f023 0210 	bic.w	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	4947      	ldr	r1, [pc, #284]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b84:	4b42      	ldr	r3, [pc, #264]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	493f      	ldr	r1, [pc, #252]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f023 0220 	bic.w	r2, r3, #32
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4938      	ldr	r1, [pc, #224]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bc0:	4b33      	ldr	r3, [pc, #204]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	4930      	ldr	r1, [pc, #192]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bde:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	4929      	ldr	r1, [pc, #164]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bfc:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	4921      	ldr	r1, [pc, #132]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	491a      	ldr	r1, [pc, #104]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c38:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	4912      	ldr	r1, [pc, #72]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	490b      	ldr	r1, [pc, #44]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c80:	4903      	ldr	r1, [pc, #12]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3748      	adds	r7, #72	; 0x48
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000

08002c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e049      	b.n	8002d3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fd feea 	bl	8000a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f000 fa3c 	bl	8003150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6a1a      	ldr	r2, [r3, #32]
 8002d50:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10f      	bne.n	8002d7a <HAL_TIM_Base_Stop+0x38>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6a1a      	ldr	r2, [r3, #32]
 8002d60:	f240 4344 	movw	r3, #1092	; 0x444
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d107      	bne.n	8002d7a <HAL_TIM_Base_Stop+0x38>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0201 	bic.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d001      	beq.n	8002da8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e04a      	b.n	8002e3e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a21      	ldr	r2, [pc, #132]	; (8002e4c <HAL_TIM_Base_Start_IT+0xbc>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d018      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x6c>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd2:	d013      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x6c>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1d      	ldr	r2, [pc, #116]	; (8002e50 <HAL_TIM_Base_Start_IT+0xc0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00e      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x6c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1c      	ldr	r2, [pc, #112]	; (8002e54 <HAL_TIM_Base_Start_IT+0xc4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d009      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x6c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1a      	ldr	r2, [pc, #104]	; (8002e58 <HAL_TIM_Base_Start_IT+0xc8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x6c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <HAL_TIM_Base_Start_IT+0xcc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d115      	bne.n	8002e28 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b06      	cmp	r3, #6
 8002e0c:	d015      	beq.n	8002e3a <HAL_TIM_Base_Start_IT+0xaa>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d011      	beq.n	8002e3a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e26:	e008      	b.n	8002e3a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e000      	b.n	8002e3c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	40000400 	.word	0x40000400
 8002e54:	40000800 	.word	0x40000800
 8002e58:	40013400 	.word	0x40013400
 8002e5c:	40014000 	.word	0x40014000
 8002e60:	00010007 	.word	0x00010007

08002e64 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10f      	bne.n	8002eac <HAL_TIM_Base_Stop_IT+0x48>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6a1a      	ldr	r2, [r3, #32]
 8002e92:	f240 4344 	movw	r3, #1092	; 0x444
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d107      	bne.n	8002eac <HAL_TIM_Base_Stop_IT+0x48>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d122      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d11b      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f06f 0202 	mvn.w	r2, #2
 8002eee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f905 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 8002f0a:	e005      	b.n	8002f18 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f8f7 	bl	8003100 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f908 	bl	8003128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d122      	bne.n	8002f72 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d11b      	bne.n	8002f72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f06f 0204 	mvn.w	r2, #4
 8002f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f8db 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 8002f5e:	e005      	b.n	8002f6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f8cd 	bl	8003100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f8de 	bl	8003128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d122      	bne.n	8002fc6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d11b      	bne.n	8002fc6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f06f 0208 	mvn.w	r2, #8
 8002f96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f8b1 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 8002fb2:	e005      	b.n	8002fc0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f8a3 	bl	8003100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f8b4 	bl	8003128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d122      	bne.n	800301a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	2b10      	cmp	r3, #16
 8002fe0:	d11b      	bne.n	800301a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f06f 0210 	mvn.w	r2, #16
 8002fea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2208      	movs	r2, #8
 8002ff0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f887 	bl	8003114 <HAL_TIM_IC_CaptureCallback>
 8003006:	e005      	b.n	8003014 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f879 	bl	8003100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f88a 	bl	8003128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d10e      	bne.n	8003046 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b01      	cmp	r3, #1
 8003034:	d107      	bne.n	8003046 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f06f 0201 	mvn.w	r2, #1
 800303e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7fd f8c1 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003050:	2b80      	cmp	r3, #128	; 0x80
 8003052:	d10e      	bne.n	8003072 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305e:	2b80      	cmp	r3, #128	; 0x80
 8003060:	d107      	bne.n	8003072 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800306a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f989 	bl	8003384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003080:	d10e      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308c:	2b80      	cmp	r3, #128	; 0x80
 800308e:	d107      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f97c 	bl	8003398 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b40      	cmp	r3, #64	; 0x40
 80030ac:	d10e      	bne.n	80030cc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d107      	bne.n	80030cc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f838 	bl	800313c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	d10e      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b20      	cmp	r3, #32
 80030e6:	d107      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0220 	mvn.w	r2, #32
 80030f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f93c 	bl	8003370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a3c      	ldr	r2, [pc, #240]	; (8003254 <TIM_Base_SetConfig+0x104>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d00f      	beq.n	8003188 <TIM_Base_SetConfig+0x38>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316e:	d00b      	beq.n	8003188 <TIM_Base_SetConfig+0x38>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a39      	ldr	r2, [pc, #228]	; (8003258 <TIM_Base_SetConfig+0x108>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d007      	beq.n	8003188 <TIM_Base_SetConfig+0x38>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a38      	ldr	r2, [pc, #224]	; (800325c <TIM_Base_SetConfig+0x10c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d003      	beq.n	8003188 <TIM_Base_SetConfig+0x38>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a37      	ldr	r2, [pc, #220]	; (8003260 <TIM_Base_SetConfig+0x110>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d108      	bne.n	800319a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a2d      	ldr	r2, [pc, #180]	; (8003254 <TIM_Base_SetConfig+0x104>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01b      	beq.n	80031da <TIM_Base_SetConfig+0x8a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a8:	d017      	beq.n	80031da <TIM_Base_SetConfig+0x8a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a2a      	ldr	r2, [pc, #168]	; (8003258 <TIM_Base_SetConfig+0x108>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <TIM_Base_SetConfig+0x8a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a29      	ldr	r2, [pc, #164]	; (800325c <TIM_Base_SetConfig+0x10c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00f      	beq.n	80031da <TIM_Base_SetConfig+0x8a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a28      	ldr	r2, [pc, #160]	; (8003260 <TIM_Base_SetConfig+0x110>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00b      	beq.n	80031da <TIM_Base_SetConfig+0x8a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a27      	ldr	r2, [pc, #156]	; (8003264 <TIM_Base_SetConfig+0x114>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <TIM_Base_SetConfig+0x8a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a26      	ldr	r2, [pc, #152]	; (8003268 <TIM_Base_SetConfig+0x118>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d003      	beq.n	80031da <TIM_Base_SetConfig+0x8a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a25      	ldr	r2, [pc, #148]	; (800326c <TIM_Base_SetConfig+0x11c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d108      	bne.n	80031ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a10      	ldr	r2, [pc, #64]	; (8003254 <TIM_Base_SetConfig+0x104>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00f      	beq.n	8003238 <TIM_Base_SetConfig+0xe8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a11      	ldr	r2, [pc, #68]	; (8003260 <TIM_Base_SetConfig+0x110>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00b      	beq.n	8003238 <TIM_Base_SetConfig+0xe8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a10      	ldr	r2, [pc, #64]	; (8003264 <TIM_Base_SetConfig+0x114>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d007      	beq.n	8003238 <TIM_Base_SetConfig+0xe8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a0f      	ldr	r2, [pc, #60]	; (8003268 <TIM_Base_SetConfig+0x118>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d003      	beq.n	8003238 <TIM_Base_SetConfig+0xe8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a0e      	ldr	r2, [pc, #56]	; (800326c <TIM_Base_SetConfig+0x11c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d103      	bne.n	8003240 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	615a      	str	r2, [r3, #20]
}
 8003246:	bf00      	nop
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800
 8003260:	40013400 	.word	0x40013400
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800

08003270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003284:	2302      	movs	r3, #2
 8003286:	e063      	b.n	8003350 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2202      	movs	r2, #2
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a2b      	ldr	r2, [pc, #172]	; (800335c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d004      	beq.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a2a      	ldr	r2, [pc, #168]	; (8003360 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d108      	bne.n	80032ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80032c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1b      	ldr	r2, [pc, #108]	; (800335c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d018      	beq.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fa:	d013      	beq.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a18      	ldr	r2, [pc, #96]	; (8003364 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00e      	beq.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a17      	ldr	r2, [pc, #92]	; (8003368 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d009      	beq.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a12      	ldr	r2, [pc, #72]	; (8003360 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a13      	ldr	r2, [pc, #76]	; (800336c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d10c      	bne.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800332a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	4313      	orrs	r3, r2
 8003334:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	40012c00 	.word	0x40012c00
 8003360:	40013400 	.word	0x40013400
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800
 800336c:	40014000 	.word	0x40014000

08003370 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e040      	b.n	8003440 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d106      	bne.n	80033d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd fba2 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2224      	movs	r2, #36	; 0x24
 80033d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fbd4 	bl	8003b98 <UART_SetConfig>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e022      	b.n	8003440 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fd9c 	bl	8003f40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 fe23 	bl	8004084 <UART_CheckIdleState>
 800343e:	4603      	mov	r3, r0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003448:	b480      	push	{r7}
 800344a:	b08b      	sub	sp, #44	; 0x2c
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	4613      	mov	r3, r2
 8003454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800345a:	2b20      	cmp	r3, #32
 800345c:	d147      	bne.n	80034ee <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <HAL_UART_Transmit_IT+0x22>
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e040      	b.n	80034f0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	88fa      	ldrh	r2, [r7, #6]
 8003478:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	88fa      	ldrh	r2, [r7, #6]
 8003480:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2221      	movs	r2, #33	; 0x21
 8003496:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a0:	d107      	bne.n	80034b2 <HAL_UART_Transmit_IT+0x6a>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4a13      	ldr	r2, [pc, #76]	; (80034fc <HAL_UART_Transmit_IT+0xb4>)
 80034ae:	66da      	str	r2, [r3, #108]	; 0x6c
 80034b0:	e002      	b.n	80034b8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4a12      	ldr	r2, [pc, #72]	; (8003500 <HAL_UART_Transmit_IT+0xb8>)
 80034b6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	e853 3f00 	ldrex	r3, [r3]
 80034c4:	613b      	str	r3, [r7, #16]
   return(result);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	623b      	str	r3, [r7, #32]
 80034d8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034da:	69f9      	ldr	r1, [r7, #28]
 80034dc:	6a3a      	ldr	r2, [r7, #32]
 80034de:	e841 2300 	strex	r3, r2, [r1]
 80034e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1e6      	bne.n	80034b8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e000      	b.n	80034f0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	372c      	adds	r7, #44	; 0x2c
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	080045b9 	.word	0x080045b9
 8003500:	08004501 	.word	0x08004501

08003504 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	; 0x28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	4613      	mov	r3, r2
 8003510:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003518:	2b20      	cmp	r3, #32
 800351a:	d132      	bne.n	8003582 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_UART_Receive_IT+0x24>
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e02b      	b.n	8003584 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d018      	beq.n	8003572 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	e853 3f00 	ldrex	r3, [r3]
 800354c:	613b      	str	r3, [r7, #16]
   return(result);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	623b      	str	r3, [r7, #32]
 8003560:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003562:	69f9      	ldr	r1, [r7, #28]
 8003564:	6a3a      	ldr	r2, [r7, #32]
 8003566:	e841 2300 	strex	r3, r2, [r1]
 800356a:	61bb      	str	r3, [r7, #24]
   return(result);
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e6      	bne.n	8003540 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	461a      	mov	r2, r3
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 fe93 	bl	80042a4 <UART_Start_Receive_IT>
 800357e:	4603      	mov	r3, r0
 8003580:	e000      	b.n	8003584 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003582:	2302      	movs	r3, #2
  }
}
 8003584:	4618      	mov	r0, r3
 8003586:	3728      	adds	r7, #40	; 0x28
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b0ba      	sub	sp, #232	; 0xe8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80035b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80035ba:	4013      	ands	r3, r2
 80035bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80035c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d115      	bne.n	80035f4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00f      	beq.n	80035f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 82ab 	beq.w	8003b40 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	4798      	blx	r3
      }
      return;
 80035f2:	e2a5      	b.n	8003b40 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8117 	beq.w	800382c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d106      	bne.n	8003618 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800360a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800360e:	4b85      	ldr	r3, [pc, #532]	; (8003824 <HAL_UART_IRQHandler+0x298>)
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 810a 	beq.w	800382c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d011      	beq.n	8003648 <HAL_UART_IRQHandler+0xbc>
 8003624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00b      	beq.n	8003648 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2201      	movs	r2, #1
 8003636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800363e:	f043 0201 	orr.w	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d011      	beq.n	8003678 <HAL_UART_IRQHandler+0xec>
 8003654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2202      	movs	r2, #2
 8003666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800366e:	f043 0204 	orr.w	r2, r3, #4
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d011      	beq.n	80036a8 <HAL_UART_IRQHandler+0x11c>
 8003684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00b      	beq.n	80036a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2204      	movs	r2, #4
 8003696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800369e:	f043 0202 	orr.w	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ac:	f003 0308 	and.w	r3, r3, #8
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d017      	beq.n	80036e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00b      	beq.n	80036e4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2208      	movs	r2, #8
 80036d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036da:	f043 0208 	orr.w	r2, r3, #8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d012      	beq.n	8003716 <HAL_UART_IRQHandler+0x18a>
 80036f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00c      	beq.n	8003716 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800370c:	f043 0220 	orr.w	r2, r3, #32
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 8211 	beq.w	8003b44 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00d      	beq.n	800374a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800372e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003732:	f003 0320 	and.w	r3, r3, #32
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003750:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b40      	cmp	r3, #64	; 0x40
 8003760:	d005      	beq.n	800376e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003766:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800376a:	2b00      	cmp	r3, #0
 800376c:	d04f      	beq.n	800380e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fe4c 	bl	800440c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d141      	bne.n	8003806 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3308      	adds	r3, #8
 8003788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003798:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800379c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3308      	adds	r3, #8
 80037aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1d9      	bne.n	8003782 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d013      	beq.n	80037fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037da:	4a13      	ldr	r2, [pc, #76]	; (8003828 <HAL_UART_IRQHandler+0x29c>)
 80037dc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fd fc7a 	bl	80010dc <HAL_DMA_Abort_IT>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d017      	beq.n	800381e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037f8:	4610      	mov	r0, r2
 80037fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fc:	e00f      	b.n	800381e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f9b4 	bl	8003b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	e00b      	b.n	800381e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9b0 	bl	8003b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380c:	e007      	b.n	800381e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f9ac 	bl	8003b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800381c:	e192      	b.n	8003b44 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800381e:	bf00      	nop
    return;
 8003820:	e190      	b.n	8003b44 <HAL_UART_IRQHandler+0x5b8>
 8003822:	bf00      	nop
 8003824:	04000120 	.word	0x04000120
 8003828:	080044d5 	.word	0x080044d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003830:	2b01      	cmp	r3, #1
 8003832:	f040 814b 	bne.w	8003acc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8144 	beq.w	8003acc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003848:	f003 0310 	and.w	r3, r3, #16
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 813d 	beq.w	8003acc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2210      	movs	r2, #16
 8003858:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b40      	cmp	r3, #64	; 0x40
 8003866:	f040 80b5 	bne.w	80039d4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003876:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 8164 	beq.w	8003b48 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800388a:	429a      	cmp	r2, r3
 800388c:	f080 815c 	bcs.w	8003b48 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003896:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	f000 8086 	beq.w	80039b2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038b2:	e853 3f00 	ldrex	r3, [r3]
 80038b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038d4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1da      	bne.n	80038a6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3308      	adds	r3, #8
 80038f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3308      	adds	r3, #8
 8003910:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003914:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003918:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800391c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003920:	e841 2300 	strex	r3, r2, [r1]
 8003924:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e1      	bne.n	80038f0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3308      	adds	r3, #8
 8003932:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800393c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800393e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003942:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3308      	adds	r3, #8
 800394c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003950:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003952:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003956:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800395e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e3      	bne.n	800392c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800397a:	e853 3f00 	ldrex	r3, [r3]
 800397e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003982:	f023 0310 	bic.w	r3, r3, #16
 8003986:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003994:	65bb      	str	r3, [r7, #88]	; 0x58
 8003996:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800399a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1e4      	bne.n	8003972 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fd fb5c 	bl	800106a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f8d7 	bl	8003b80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039d2:	e0b9      	b.n	8003b48 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80ab 	beq.w	8003b4c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80039f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 80a6 	beq.w	8003b4c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	e853 3f00 	ldrex	r3, [r3]
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a22:	647b      	str	r3, [r7, #68]	; 0x44
 8003a24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e4      	bne.n	8003a00 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	623b      	str	r3, [r7, #32]
   return(result);
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	3308      	adds	r3, #8
 8003a56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a5a:	633a      	str	r2, [r7, #48]	; 0x30
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e3      	bne.n	8003a36 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	e853 3f00 	ldrex	r3, [r3]
 8003a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0310 	bic.w	r3, r3, #16
 8003a96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	69b9      	ldr	r1, [r7, #24]
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	e841 2300 	strex	r3, r2, [r1]
 8003ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e4      	bne.n	8003a82 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003abe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f85b 	bl	8003b80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003aca:	e03f      	b.n	8003b4c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00e      	beq.n	8003af6 <HAL_UART_IRQHandler+0x56a>
 8003ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003aec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 ff94 	bl	8004a1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003af4:	e02d      	b.n	8003b52 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00e      	beq.n	8003b20 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01c      	beq.n	8003b50 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4798      	blx	r3
    }
    return;
 8003b1e:	e017      	b.n	8003b50 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d012      	beq.n	8003b52 <HAL_UART_IRQHandler+0x5c6>
 8003b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00c      	beq.n	8003b52 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fd9d 	bl	8004678 <UART_EndTransmit_IT>
    return;
 8003b3e:	e008      	b.n	8003b52 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003b40:	bf00      	nop
 8003b42:	e006      	b.n	8003b52 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003b44:	bf00      	nop
 8003b46:	e004      	b.n	8003b52 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003b48:	bf00      	nop
 8003b4a:	e002      	b.n	8003b52 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003b4c:	bf00      	nop
 8003b4e:	e000      	b.n	8003b52 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003b50:	bf00      	nop
  }

}
 8003b52:	37e8      	adds	r7, #232	; 0xe8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003bc6:	f023 030c 	bic.w	r3, r3, #12
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	6979      	ldr	r1, [r7, #20]
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4aa7      	ldr	r2, [pc, #668]	; (8003eb0 <UART_SetConfig+0x318>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d120      	bne.n	8003c5a <UART_SetConfig+0xc2>
 8003c18:	4ba6      	ldr	r3, [pc, #664]	; (8003eb4 <UART_SetConfig+0x31c>)
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d817      	bhi.n	8003c54 <UART_SetConfig+0xbc>
 8003c24:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <UART_SetConfig+0x94>)
 8003c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2a:	bf00      	nop
 8003c2c:	08003c3d 	.word	0x08003c3d
 8003c30:	08003c49 	.word	0x08003c49
 8003c34:	08003c4f 	.word	0x08003c4f
 8003c38:	08003c43 	.word	0x08003c43
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e0b5      	b.n	8003dae <UART_SetConfig+0x216>
 8003c42:	2302      	movs	r3, #2
 8003c44:	77fb      	strb	r3, [r7, #31]
 8003c46:	e0b2      	b.n	8003dae <UART_SetConfig+0x216>
 8003c48:	2304      	movs	r3, #4
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	e0af      	b.n	8003dae <UART_SetConfig+0x216>
 8003c4e:	2308      	movs	r3, #8
 8003c50:	77fb      	strb	r3, [r7, #31]
 8003c52:	e0ac      	b.n	8003dae <UART_SetConfig+0x216>
 8003c54:	2310      	movs	r3, #16
 8003c56:	77fb      	strb	r3, [r7, #31]
 8003c58:	e0a9      	b.n	8003dae <UART_SetConfig+0x216>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a96      	ldr	r2, [pc, #600]	; (8003eb8 <UART_SetConfig+0x320>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d124      	bne.n	8003cae <UART_SetConfig+0x116>
 8003c64:	4b93      	ldr	r3, [pc, #588]	; (8003eb4 <UART_SetConfig+0x31c>)
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c70:	d011      	beq.n	8003c96 <UART_SetConfig+0xfe>
 8003c72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c76:	d817      	bhi.n	8003ca8 <UART_SetConfig+0x110>
 8003c78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c7c:	d011      	beq.n	8003ca2 <UART_SetConfig+0x10a>
 8003c7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c82:	d811      	bhi.n	8003ca8 <UART_SetConfig+0x110>
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <UART_SetConfig+0xf8>
 8003c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8c:	d006      	beq.n	8003c9c <UART_SetConfig+0x104>
 8003c8e:	e00b      	b.n	8003ca8 <UART_SetConfig+0x110>
 8003c90:	2300      	movs	r3, #0
 8003c92:	77fb      	strb	r3, [r7, #31]
 8003c94:	e08b      	b.n	8003dae <UART_SetConfig+0x216>
 8003c96:	2302      	movs	r3, #2
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e088      	b.n	8003dae <UART_SetConfig+0x216>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e085      	b.n	8003dae <UART_SetConfig+0x216>
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	77fb      	strb	r3, [r7, #31]
 8003ca6:	e082      	b.n	8003dae <UART_SetConfig+0x216>
 8003ca8:	2310      	movs	r3, #16
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e07f      	b.n	8003dae <UART_SetConfig+0x216>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a82      	ldr	r2, [pc, #520]	; (8003ebc <UART_SetConfig+0x324>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d124      	bne.n	8003d02 <UART_SetConfig+0x16a>
 8003cb8:	4b7e      	ldr	r3, [pc, #504]	; (8003eb4 <UART_SetConfig+0x31c>)
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003cc0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cc4:	d011      	beq.n	8003cea <UART_SetConfig+0x152>
 8003cc6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cca:	d817      	bhi.n	8003cfc <UART_SetConfig+0x164>
 8003ccc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cd0:	d011      	beq.n	8003cf6 <UART_SetConfig+0x15e>
 8003cd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cd6:	d811      	bhi.n	8003cfc <UART_SetConfig+0x164>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <UART_SetConfig+0x14c>
 8003cdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ce0:	d006      	beq.n	8003cf0 <UART_SetConfig+0x158>
 8003ce2:	e00b      	b.n	8003cfc <UART_SetConfig+0x164>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e061      	b.n	8003dae <UART_SetConfig+0x216>
 8003cea:	2302      	movs	r3, #2
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e05e      	b.n	8003dae <UART_SetConfig+0x216>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	77fb      	strb	r3, [r7, #31]
 8003cf4:	e05b      	b.n	8003dae <UART_SetConfig+0x216>
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	77fb      	strb	r3, [r7, #31]
 8003cfa:	e058      	b.n	8003dae <UART_SetConfig+0x216>
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	77fb      	strb	r3, [r7, #31]
 8003d00:	e055      	b.n	8003dae <UART_SetConfig+0x216>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a6e      	ldr	r2, [pc, #440]	; (8003ec0 <UART_SetConfig+0x328>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d124      	bne.n	8003d56 <UART_SetConfig+0x1be>
 8003d0c:	4b69      	ldr	r3, [pc, #420]	; (8003eb4 <UART_SetConfig+0x31c>)
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003d14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d18:	d011      	beq.n	8003d3e <UART_SetConfig+0x1a6>
 8003d1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d1e:	d817      	bhi.n	8003d50 <UART_SetConfig+0x1b8>
 8003d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d24:	d011      	beq.n	8003d4a <UART_SetConfig+0x1b2>
 8003d26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d2a:	d811      	bhi.n	8003d50 <UART_SetConfig+0x1b8>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <UART_SetConfig+0x1a0>
 8003d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d34:	d006      	beq.n	8003d44 <UART_SetConfig+0x1ac>
 8003d36:	e00b      	b.n	8003d50 <UART_SetConfig+0x1b8>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e037      	b.n	8003dae <UART_SetConfig+0x216>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	77fb      	strb	r3, [r7, #31]
 8003d42:	e034      	b.n	8003dae <UART_SetConfig+0x216>
 8003d44:	2304      	movs	r3, #4
 8003d46:	77fb      	strb	r3, [r7, #31]
 8003d48:	e031      	b.n	8003dae <UART_SetConfig+0x216>
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	77fb      	strb	r3, [r7, #31]
 8003d4e:	e02e      	b.n	8003dae <UART_SetConfig+0x216>
 8003d50:	2310      	movs	r3, #16
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e02b      	b.n	8003dae <UART_SetConfig+0x216>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a5a      	ldr	r2, [pc, #360]	; (8003ec4 <UART_SetConfig+0x32c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d124      	bne.n	8003daa <UART_SetConfig+0x212>
 8003d60:	4b54      	ldr	r3, [pc, #336]	; (8003eb4 <UART_SetConfig+0x31c>)
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003d68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d6c:	d011      	beq.n	8003d92 <UART_SetConfig+0x1fa>
 8003d6e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d72:	d817      	bhi.n	8003da4 <UART_SetConfig+0x20c>
 8003d74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d78:	d011      	beq.n	8003d9e <UART_SetConfig+0x206>
 8003d7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d7e:	d811      	bhi.n	8003da4 <UART_SetConfig+0x20c>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <UART_SetConfig+0x1f4>
 8003d84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d88:	d006      	beq.n	8003d98 <UART_SetConfig+0x200>
 8003d8a:	e00b      	b.n	8003da4 <UART_SetConfig+0x20c>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	77fb      	strb	r3, [r7, #31]
 8003d90:	e00d      	b.n	8003dae <UART_SetConfig+0x216>
 8003d92:	2302      	movs	r3, #2
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e00a      	b.n	8003dae <UART_SetConfig+0x216>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e007      	b.n	8003dae <UART_SetConfig+0x216>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e004      	b.n	8003dae <UART_SetConfig+0x216>
 8003da4:	2310      	movs	r3, #16
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e001      	b.n	8003dae <UART_SetConfig+0x216>
 8003daa:	2310      	movs	r3, #16
 8003dac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db6:	d15b      	bne.n	8003e70 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003db8:	7ffb      	ldrb	r3, [r7, #31]
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d827      	bhi.n	8003e0e <UART_SetConfig+0x276>
 8003dbe:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <UART_SetConfig+0x22c>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003de9 	.word	0x08003de9
 8003dc8:	08003df1 	.word	0x08003df1
 8003dcc:	08003df9 	.word	0x08003df9
 8003dd0:	08003e0f 	.word	0x08003e0f
 8003dd4:	08003dff 	.word	0x08003dff
 8003dd8:	08003e0f 	.word	0x08003e0f
 8003ddc:	08003e0f 	.word	0x08003e0f
 8003de0:	08003e0f 	.word	0x08003e0f
 8003de4:	08003e07 	.word	0x08003e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de8:	f7fe fd60 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003dec:	61b8      	str	r0, [r7, #24]
        break;
 8003dee:	e013      	b.n	8003e18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003df0:	f7fe fd7e 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 8003df4:	61b8      	str	r0, [r7, #24]
        break;
 8003df6:	e00f      	b.n	8003e18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df8:	4b33      	ldr	r3, [pc, #204]	; (8003ec8 <UART_SetConfig+0x330>)
 8003dfa:	61bb      	str	r3, [r7, #24]
        break;
 8003dfc:	e00c      	b.n	8003e18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dfe:	f7fe fcdf 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8003e02:	61b8      	str	r0, [r7, #24]
        break;
 8003e04:	e008      	b.n	8003e18 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e0a:	61bb      	str	r3, [r7, #24]
        break;
 8003e0c:	e004      	b.n	8003e18 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	77bb      	strb	r3, [r7, #30]
        break;
 8003e16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8082 	beq.w	8003f24 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	005a      	lsls	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	085b      	lsrs	r3, r3, #1
 8003e2a:	441a      	add	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	2b0f      	cmp	r3, #15
 8003e3a:	d916      	bls.n	8003e6a <UART_SetConfig+0x2d2>
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e42:	d212      	bcs.n	8003e6a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f023 030f 	bic.w	r3, r3, #15
 8003e4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	085b      	lsrs	r3, r3, #1
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	f003 0307 	and.w	r3, r3, #7
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	89fb      	ldrh	r3, [r7, #14]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	89fa      	ldrh	r2, [r7, #14]
 8003e66:	60da      	str	r2, [r3, #12]
 8003e68:	e05c      	b.n	8003f24 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	77bb      	strb	r3, [r7, #30]
 8003e6e:	e059      	b.n	8003f24 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e70:	7ffb      	ldrb	r3, [r7, #31]
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d835      	bhi.n	8003ee2 <UART_SetConfig+0x34a>
 8003e76:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <UART_SetConfig+0x2e4>)
 8003e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7c:	08003ea1 	.word	0x08003ea1
 8003e80:	08003ea9 	.word	0x08003ea9
 8003e84:	08003ecd 	.word	0x08003ecd
 8003e88:	08003ee3 	.word	0x08003ee3
 8003e8c:	08003ed3 	.word	0x08003ed3
 8003e90:	08003ee3 	.word	0x08003ee3
 8003e94:	08003ee3 	.word	0x08003ee3
 8003e98:	08003ee3 	.word	0x08003ee3
 8003e9c:	08003edb 	.word	0x08003edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea0:	f7fe fd04 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003ea4:	61b8      	str	r0, [r7, #24]
        break;
 8003ea6:	e021      	b.n	8003eec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea8:	f7fe fd22 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 8003eac:	61b8      	str	r0, [r7, #24]
        break;
 8003eae:	e01d      	b.n	8003eec <UART_SetConfig+0x354>
 8003eb0:	40013800 	.word	0x40013800
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40004400 	.word	0x40004400
 8003ebc:	40004800 	.word	0x40004800
 8003ec0:	40004c00 	.word	0x40004c00
 8003ec4:	40005000 	.word	0x40005000
 8003ec8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <UART_SetConfig+0x3a4>)
 8003ece:	61bb      	str	r3, [r7, #24]
        break;
 8003ed0:	e00c      	b.n	8003eec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed2:	f7fe fc75 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8003ed6:	61b8      	str	r0, [r7, #24]
        break;
 8003ed8:	e008      	b.n	8003eec <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ede:	61bb      	str	r3, [r7, #24]
        break;
 8003ee0:	e004      	b.n	8003eec <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	77bb      	strb	r3, [r7, #30]
        break;
 8003eea:	bf00      	nop
    }

    if (pclk != 0U)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d018      	beq.n	8003f24 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	085a      	lsrs	r2, r3, #1
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	441a      	add	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b0f      	cmp	r3, #15
 8003f0a:	d909      	bls.n	8003f20 <UART_SetConfig+0x388>
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f12:	d205      	bcs.n	8003f20 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	e001      	b.n	8003f24 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003f30:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	007a1200 	.word	0x007a1200

08003f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	f003 0310 	and.w	r3, r3, #16
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	2b00      	cmp	r3, #0
 800401e:	d01a      	beq.n	8004056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800403e:	d10a      	bne.n	8004056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]
  }
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b098      	sub	sp, #96	; 0x60
 8004088:	af02      	add	r7, sp, #8
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004094:	f7fc fecc 	bl	8000e30 <HAL_GetTick>
 8004098:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d12e      	bne.n	8004106 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b0:	2200      	movs	r2, #0
 80040b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f88c 	bl	80041d4 <UART_WaitOnFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d021      	beq.n	8004106 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040d6:	653b      	str	r3, [r7, #80]	; 0x50
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040e0:	647b      	str	r3, [r7, #68]	; 0x44
 80040e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e6      	bne.n	80040c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e062      	b.n	80041cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b04      	cmp	r3, #4
 8004112:	d149      	bne.n	80041a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800411c:	2200      	movs	r2, #0
 800411e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f856 	bl	80041d4 <UART_WaitOnFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d03c      	beq.n	80041a8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	623b      	str	r3, [r7, #32]
   return(result);
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800414c:	633b      	str	r3, [r7, #48]	; 0x30
 800414e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e6      	bne.n	800412e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3308      	adds	r3, #8
 8004166:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	64bb      	str	r3, [r7, #72]	; 0x48
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3308      	adds	r3, #8
 800417e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004180:	61fa      	str	r2, [r7, #28]
 8004182:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	69b9      	ldr	r1, [r7, #24]
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	617b      	str	r3, [r7, #20]
   return(result);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e5      	bne.n	8004160 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e011      	b.n	80041cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3758      	adds	r7, #88	; 0x58
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e4:	e049      	b.n	800427a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d045      	beq.n	800427a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ee:	f7fc fe1f 	bl	8000e30 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d302      	bcc.n	8004204 <UART_WaitOnFlagUntilTimeout+0x30>
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e048      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	d031      	beq.n	800427a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b08      	cmp	r3, #8
 8004222:	d110      	bne.n	8004246 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2208      	movs	r2, #8
 800422a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f8ed 	bl	800440c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2208      	movs	r2, #8
 8004236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e029      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004254:	d111      	bne.n	800427a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800425e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 f8d3 	bl	800440c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e00f      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69da      	ldr	r2, [r3, #28]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	429a      	cmp	r2, r3
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	429a      	cmp	r2, r3
 8004296:	d0a6      	beq.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b097      	sub	sp, #92	; 0x5c
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	88fa      	ldrh	r2, [r7, #6]
 80042bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	88fa      	ldrh	r2, [r7, #6]
 80042c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d6:	d10e      	bne.n	80042f6 <UART_Start_Receive_IT+0x52>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <UART_Start_Receive_IT+0x48>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80042e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042ea:	e01a      	b.n	8004322 <UART_Start_Receive_IT+0x7e>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	22ff      	movs	r2, #255	; 0xff
 80042f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042f4:	e015      	b.n	8004322 <UART_Start_Receive_IT+0x7e>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10d      	bne.n	800431a <UART_Start_Receive_IT+0x76>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d104      	bne.n	8004310 <UART_Start_Receive_IT+0x6c>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	22ff      	movs	r2, #255	; 0xff
 800430a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800430e:	e008      	b.n	8004322 <UART_Start_Receive_IT+0x7e>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	227f      	movs	r2, #127	; 0x7f
 8004314:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004318:	e003      	b.n	8004322 <UART_Start_Receive_IT+0x7e>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2222      	movs	r2, #34	; 0x22
 800432e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3308      	adds	r3, #8
 8004338:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	657b      	str	r3, [r7, #84]	; 0x54
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3308      	adds	r3, #8
 8004350:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004352:	64ba      	str	r2, [r7, #72]	; 0x48
 8004354:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e5      	bne.n	8004332 <UART_Start_Receive_IT+0x8e>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436e:	d107      	bne.n	8004380 <UART_Start_Receive_IT+0xdc>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d103      	bne.n	8004380 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4a22      	ldr	r2, [pc, #136]	; (8004404 <UART_Start_Receive_IT+0x160>)
 800437c:	669a      	str	r2, [r3, #104]	; 0x68
 800437e:	e002      	b.n	8004386 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a21      	ldr	r2, [pc, #132]	; (8004408 <UART_Start_Receive_IT+0x164>)
 8004384:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d019      	beq.n	80043c2 <UART_Start_Receive_IT+0x11e>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80043a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
 80043ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e6      	bne.n	800438e <UART_Start_Receive_IT+0xea>
 80043c0:	e018      	b.n	80043f4 <UART_Start_Receive_IT+0x150>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	613b      	str	r3, [r7, #16]
   return(result);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f043 0320 	orr.w	r3, r3, #32
 80043d6:	653b      	str	r3, [r7, #80]	; 0x50
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e0:	623b      	str	r3, [r7, #32]
 80043e2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	69f9      	ldr	r1, [r7, #28]
 80043e6:	6a3a      	ldr	r2, [r7, #32]
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e6      	bne.n	80043c2 <UART_Start_Receive_IT+0x11e>
  }
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	375c      	adds	r7, #92	; 0x5c
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	08004875 	.word	0x08004875
 8004408:	080046cd 	.word	0x080046cd

0800440c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800440c:	b480      	push	{r7}
 800440e:	b095      	sub	sp, #84	; 0x54
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004432:	643b      	str	r3, [r7, #64]	; 0x40
 8004434:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e6      	bne.n	8004414 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3308      	adds	r3, #8
 800444c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	61fb      	str	r3, [r7, #28]
   return(result);
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	64bb      	str	r3, [r7, #72]	; 0x48
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3308      	adds	r3, #8
 8004464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004466:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800446c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e5      	bne.n	8004446 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447e:	2b01      	cmp	r3, #1
 8004480:	d118      	bne.n	80044b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f023 0310 	bic.w	r3, r3, #16
 8004496:	647b      	str	r3, [r7, #68]	; 0x44
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6979      	ldr	r1, [r7, #20]
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	613b      	str	r3, [r7, #16]
   return(result);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e6      	bne.n	8004482 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80044c8:	bf00      	nop
 80044ca:	3754      	adds	r7, #84	; 0x54
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f7ff fb3a 	bl	8003b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044f8:	bf00      	nop
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b08f      	sub	sp, #60	; 0x3c
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800450c:	2b21      	cmp	r3, #33	; 0x21
 800450e:	d14d      	bne.n	80045ac <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d132      	bne.n	8004582 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	61fb      	str	r3, [r7, #28]
   return(result);
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e6      	bne.n	800451c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	60bb      	str	r3, [r7, #8]
   return(result);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004562:	633b      	str	r3, [r7, #48]	; 0x30
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	6979      	ldr	r1, [r7, #20]
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	613b      	str	r3, [r7, #16]
   return(result);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e6      	bne.n	800454e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004580:	e014      	b.n	80045ac <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004586:	781a      	ldrb	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	b292      	uxth	r2, r2
 800458e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80045ac:	bf00      	nop
 80045ae:	373c      	adds	r7, #60	; 0x3c
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b091      	sub	sp, #68	; 0x44
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c4:	2b21      	cmp	r3, #33	; 0x21
 80045c6:	d151      	bne.n	800466c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d132      	bne.n	800463a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	623b      	str	r3, [r7, #32]
   return(result);
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30
 80045f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fa:	e841 2300 	strex	r3, r2, [r1]
 80045fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1e6      	bne.n	80045d4 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	60fb      	str	r3, [r7, #12]
   return(result);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	69b9      	ldr	r1, [r7, #24]
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	617b      	str	r3, [r7, #20]
   return(result);
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e6      	bne.n	8004606 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004638:	e018      	b.n	800466c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004642:	881a      	ldrh	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800464c:	b292      	uxth	r2, r2
 800464e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004654:	1c9a      	adds	r2, r3, #2
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800466c:	bf00      	nop
 800466e:	3744      	adds	r7, #68	; 0x44
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	60bb      	str	r3, [r7, #8]
   return(result);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004694:	61fb      	str	r3, [r7, #28]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6979      	ldr	r1, [r7, #20]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	613b      	str	r3, [r7, #16]
   return(result);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e6      	bne.n	8004680 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff fa4a 	bl	8003b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046c4:	bf00      	nop
 80046c6:	3720      	adds	r7, #32
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b09c      	sub	sp, #112	; 0x70
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e4:	2b22      	cmp	r3, #34	; 0x22
 80046e6:	f040 80b9 	bne.w	800485c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046f8:	b2d9      	uxtb	r1, r3
 80046fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004704:	400a      	ands	r2, r1
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	f040 809c 	bne.w	800486c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004748:	66bb      	str	r3, [r7, #104]	; 0x68
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004752:	65bb      	str	r3, [r7, #88]	; 0x58
 8004754:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e6      	bne.n	8004734 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3308      	adds	r3, #8
 800476c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004778:	f023 0301 	bic.w	r3, r3, #1
 800477c:	667b      	str	r3, [r7, #100]	; 0x64
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3308      	adds	r3, #8
 8004784:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004786:	647a      	str	r2, [r7, #68]	; 0x44
 8004788:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800478c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e5      	bne.n	8004766 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2220      	movs	r2, #32
 800479e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d018      	beq.n	80047ee <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	623b      	str	r3, [r7, #32]
   return(result);
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047d0:	663b      	str	r3, [r7, #96]	; 0x60
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047da:	633b      	str	r3, [r7, #48]	; 0x30
 80047dc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e6      	bne.n	80047bc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d12e      	bne.n	8004854 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	60fb      	str	r3, [r7, #12]
   return(result);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f023 0310 	bic.w	r3, r3, #16
 8004810:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800481a:	61fb      	str	r3, [r7, #28]
 800481c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	69b9      	ldr	r1, [r7, #24]
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	617b      	str	r3, [r7, #20]
   return(result);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e6      	bne.n	80047fc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b10      	cmp	r3, #16
 800483a:	d103      	bne.n	8004844 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2210      	movs	r2, #16
 8004842:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800484a:	4619      	mov	r1, r3
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff f997 	bl	8003b80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004852:	e00b      	b.n	800486c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fb fedf 	bl	8000618 <HAL_UART_RxCpltCallback>
}
 800485a:	e007      	b.n	800486c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699a      	ldr	r2, [r3, #24]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0208 	orr.w	r2, r2, #8
 800486a:	619a      	str	r2, [r3, #24]
}
 800486c:	bf00      	nop
 800486e:	3770      	adds	r7, #112	; 0x70
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b09c      	sub	sp, #112	; 0x70
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004882:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800488c:	2b22      	cmp	r3, #34	; 0x22
 800488e:	f040 80b9 	bne.w	8004a04 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004898:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80048a2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80048a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80048aa:	4013      	ands	r3, r2
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b6:	1c9a      	adds	r2, r3, #2
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f040 809c 	bne.w	8004a14 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80048ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048f0:	667b      	str	r3, [r7, #100]	; 0x64
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048fa:	657b      	str	r3, [r7, #84]	; 0x54
 80048fc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004900:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e6      	bne.n	80048dc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3308      	adds	r3, #8
 8004914:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	f023 0301 	bic.w	r3, r3, #1
 8004924:	663b      	str	r3, [r7, #96]	; 0x60
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3308      	adds	r3, #8
 800492c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800492e:	643a      	str	r2, [r7, #64]	; 0x40
 8004930:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004934:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800493c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e5      	bne.n	800490e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d018      	beq.n	8004996 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	e853 3f00 	ldrex	r3, [r3]
 8004970:	61fb      	str	r3, [r7, #28]
   return(result);
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004978:	65fb      	str	r3, [r7, #92]	; 0x5c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004984:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e6      	bne.n	8004964 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499a:	2b01      	cmp	r3, #1
 800499c:	d12e      	bne.n	80049fc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f023 0310 	bic.w	r3, r3, #16
 80049b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6979      	ldr	r1, [r7, #20]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	613b      	str	r3, [r7, #16]
   return(result);
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e6      	bne.n	80049a4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	2b10      	cmp	r3, #16
 80049e2:	d103      	bne.n	80049ec <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2210      	movs	r2, #16
 80049ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff f8c3 	bl	8003b80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049fa:	e00b      	b.n	8004a14 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7fb fe0b 	bl	8000618 <HAL_UART_RxCpltCallback>
}
 8004a02:	e007      	b.n	8004a14 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0208 	orr.w	r2, r2, #8
 8004a12:	619a      	str	r2, [r3, #24]
}
 8004a14:	bf00      	nop
 8004a16:	3770      	adds	r7, #112	; 0x70
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <__libc_init_array>:
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	4d0d      	ldr	r5, [pc, #52]	; (8004a68 <__libc_init_array+0x38>)
 8004a34:	4c0d      	ldr	r4, [pc, #52]	; (8004a6c <__libc_init_array+0x3c>)
 8004a36:	1b64      	subs	r4, r4, r5
 8004a38:	10a4      	asrs	r4, r4, #2
 8004a3a:	2600      	movs	r6, #0
 8004a3c:	42a6      	cmp	r6, r4
 8004a3e:	d109      	bne.n	8004a54 <__libc_init_array+0x24>
 8004a40:	4d0b      	ldr	r5, [pc, #44]	; (8004a70 <__libc_init_array+0x40>)
 8004a42:	4c0c      	ldr	r4, [pc, #48]	; (8004a74 <__libc_init_array+0x44>)
 8004a44:	f000 f820 	bl	8004a88 <_init>
 8004a48:	1b64      	subs	r4, r4, r5
 8004a4a:	10a4      	asrs	r4, r4, #2
 8004a4c:	2600      	movs	r6, #0
 8004a4e:	42a6      	cmp	r6, r4
 8004a50:	d105      	bne.n	8004a5e <__libc_init_array+0x2e>
 8004a52:	bd70      	pop	{r4, r5, r6, pc}
 8004a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a58:	4798      	blx	r3
 8004a5a:	3601      	adds	r6, #1
 8004a5c:	e7ee      	b.n	8004a3c <__libc_init_array+0xc>
 8004a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a62:	4798      	blx	r3
 8004a64:	3601      	adds	r6, #1
 8004a66:	e7f2      	b.n	8004a4e <__libc_init_array+0x1e>
 8004a68:	08004ad8 	.word	0x08004ad8
 8004a6c:	08004ad8 	.word	0x08004ad8
 8004a70:	08004ad8 	.word	0x08004ad8
 8004a74:	08004adc 	.word	0x08004adc

08004a78 <memset>:
 8004a78:	4402      	add	r2, r0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d100      	bne.n	8004a82 <memset+0xa>
 8004a80:	4770      	bx	lr
 8004a82:	f803 1b01 	strb.w	r1, [r3], #1
 8004a86:	e7f9      	b.n	8004a7c <memset+0x4>

08004a88 <_init>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr

08004a94 <_fini>:
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a96:	bf00      	nop
 8004a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9a:	bc08      	pop	{r3}
 8004a9c:	469e      	mov	lr, r3
 8004a9e:	4770      	bx	lr
